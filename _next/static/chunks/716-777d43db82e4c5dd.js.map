{"version":3,"file":"static/chunks/716-777d43db82e4c5dd.js","mappings":"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","sources":["webpack://_N_E/./components/common/form/box.tsx","webpack://_N_E/./components/common/form/button.tsx","webpack://_N_E/./components/common/form/input.tsx","webpack://_N_E/./components/common/form/p.tsx","webpack://_N_E/./components/common/form/submit-button.tsx","webpack://_N_E/./components/common/mobile-scope.tsx","webpack://_N_E/./components/common/form/title.tsx"],"sourcesContent":["import { useContext } from \"react\";\nimport { useCssStateManager } from \"../../../hooks/use_css_state_manager\";\nimport { LayoutStateContext } from \"../../../contexts/layout_state\";\n\nexport type BoxProps = {\n    border?: boolean;\n    desktopWidth?: number;\n    children: any;\n};\n\nexport default function Box({children,border,desktopWidth = 600}:BoxProps) {\n    const cssStateManager = useCssStateManager([\"box\"]);\n    cssStateManager.useProperty(border,\"border\");\n\n    const { mobileDetect: { widthCutoffStyleSection } } = useContext(LayoutStateContext);\n\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()}>\n                <div className=\"inner\">\n                    {children}\n                </div>\n            </div>\n            <style jsx>{`\n            .box {\n                width: 100%;\n                display: flex;\n                justify-content: center;\n            }\n\n            .inner {\n                max-width: ${desktopWidth}rem;\n                min-width: ${desktopWidth}rem;\n            }\n\n            .border .inner {\n                border: 1rem solid var(--border-color);\n                padding: 20rem;\n            }\n\n            ${widthCutoffStyleSection(`\n                .box .inner {\n                    max-width: none;\n                    min-width: 0rem;\n                    width: 100%;\n                }\n            `)}\n            `}</style>\n        </>\n    );\n}","import { styledButton } from \"../button\";\n\nexport const Button = styledButton({display: \"inline-block\",fontSize: \"14rem\"},{},{\n    backgroundColorCssVarName: \"--button-backcolor\",\n    colorCssVarName: \"--button-textcolor\"\n});\n\nexport const AlternateButton = styledButton({display: \"inline-block\",fontSize: \"14rem\"},{},{\n    backgroundColorCssVarName: \"--button-alternate-backcolor\",\n    colorCssVarName: \"--button-alternate-textcolor\"\n})\n\n","import { CSSProperties, useContext, useEffect, useRef } from \"react\";\nimport { useCssStateManager } from \"../../../hooks/use_css_state_manager\";\nimport { useForm } from \"./form\";\nimport { misc } from \"../../../lib/misc\";\nimport { SmartState, useSmartState } from \"../../../hooks/use_smart_state\";\nimport { SelectOption } from \"../../../lib/shared/types/form.types\";\nimport { LayoutStateContext } from \"../../../contexts/layout_state\";\nimport { EventPane } from \"../../core/event_pane\";\n\nexport type InputProps = {\n    name: string;\n    caption?: string;\n    placeholder?: string;\n    type?: \"text\" | \"password\" | \"mobile\" | \"hidden\" | \"otp\" | \"select\" | \"checkbox\";\n    initialValue?: string;\n    initialSelectedIndex?: number;\n    otpLength?: number;\n    selectOptions?: SelectOption[];\n    onChange?: (value: string) => void;\n    onKeyDown?: (key: string,preventDefault?: () => void,preventEnter?: () => void) => void;\n    onBlur?: () => void;\n    callOnChangeOnInit?: boolean;\n    required?: boolean;\n};\n\nexport default function Input({\n        type = \"text\",\n        name,\n        initialValue = \"\",\n        otpLength = 6,\n        selectOptions = [],\n        onChange,\n        callOnChangeOnInit = false,\n        initialSelectedIndex,\n        caption,\n        placeholder,\n        required,\n        onKeyDown = () => {},\n        onBlur = () => {}\n    }:InputProps) {\n    const { scalePixelToRem } = useContext(LayoutStateContext);\n    const cssStateManager = useCssStateManager([\"input\"]);\n    const error = cssStateManager.useState(false,\"error\");\n    const disabled = cssStateManager.useState(false,\"disabled\");\n    cssStateManager.useProperty(type===\"mobile\",\"type-is-mobile\");\n    cssStateManager.useProperty(type===\"checkbox\",\"type-is-checkbox\");\n    cssStateManager.useProperty(type===\"hidden\",\"type-is-hidden\");\n    cssStateManager.useProperty(type===\"otp\",\"type-is-otp\");\n    const hasFocus = cssStateManager.useState(false,\"has-focus\");\n\n    const mobileCountryCode = useSmartState(\"\");\n\n    const lastDiffersFromInitialValueRef = useRef(false);\n\n    const inputRef = useRef<HTMLInputElement>();    \n    const selectRef = useRef<HTMLSelectElement>();\n\n    const { input: { maxWidth,captionPosition = \"header\" },useInput,align} = useForm();\n\n    const getValue = () => {\n        if (type===\"select\") {\n            return misc.getSelectElementValue(selectRef);\n        }\n        else if (type===\"checkbox\") {\n            return misc.getInputElementChecked(inputRef)?\"checked\":\"\";\n        }\n        else {\n            const value = misc.getInputElementValue(inputRef);\n            if (type===\"mobile\") {                \n                return `${mobileCountryCode.value}/${value}`;\n            }\n            else {\n                return value;\n            }\n        }\n    };\n\n    const setValue = (value: string) => {\n        if (type===\"select\") {            \n            misc.setSelectElementValue(selectRef,value);\n        }\n        else if (type===\"checkbox\") {\n            misc.setInputElementChecked(inputRef,value===\"checked\");\n        }\n        else {\n            if (type===\"mobile\") {\n                const parts = (value.includes(\"/\")?value:`/${value}`).split(\"/\");\n                const countryCode = parts[0] || \"\";\n                const number = parts.slice(1).join(\"/\").trim();\n                mobileCountryCode.value = countryCode;\n                misc.setInputElementValue(inputRef,number);    \n            }\n            else {\n                misc.setInputElementValue(inputRef,value);    \n            }\n        }\n    };\n\n    const getDiffersFromInitialValue = () => initialValue!==getValue();\n\n    const interfaceToForm = useInput(() => ({\n        focus() {\n            if (type===\"select\") {\n                misc.focusSelectElement(selectRef);\n            }\n            else {\n                misc.focusInputElement(inputRef);\n            }            \n        },\n        getName() {\n            return name;\n        },\n        signalInitialized() {\n            if ((callOnChangeOnInit) && (onChange)) {\n                onChange(getValue());\n            }\n        },\n        getValue,\n        setValue,\n        getErrorState() {\n            return error;\n        },\n        getInitialValue() {\n            return initialValue;\n        },\n        getType() {\n            return type;\n        },\n        setSelectedIndex(value: number) {\n            if (type===\"select\") {\n                misc.setSelectElementSelectedIndex(selectRef,value);\n            }\n        },\n        getInitialSelectedIndex() {\n            if ((type===\"select\") && (typeof initialSelectedIndex===\"number\") && (initialSelectedIndex>=0)) {\n                return initialSelectedIndex;\n            }\n            else {\n                return -1;\n            }            \n        },\n        getIsHidden() {\n            return type===\"hidden\";\n        },\n        getDisabledState() {\n            return disabled;\n        },\n        getDiffersFromInitialValue,\n        getOtpIsComplete() {\n            return (type===\"otp\")?getValue().length===otpLength:false;\n        }\n    }));\n\n    const { makeup: { caption: makeupCaption,required: makeupRequired,placeholder: makeupPlaceholder } } = interfaceToForm;    \n\n    caption = caption || makeupCaption;\n    placeholder = placeholder || makeupPlaceholder || \"\";\n    if (typeof required!==\"boolean\") required = makeupRequired;\n\n    const handleKeyDown = (key: string,preventDefault: () => void) => {\n        let mustPreventEnter = false;\n        const preventEnter = () => {\n            mustPreventEnter = true;\n        };\n        onKeyDown(key,preventDefault,preventEnter);\n        if ((key===\"Enter\") && (!mustPreventEnter)) {\n            interfaceToForm.signalKeyDownEnter();\n        }        \n        if ((key===\"Backspace\") && (type===\"mobile\")) {\n            const selectionStart = misc.getInputElementSelectionStart(inputRef);\n            if (selectionStart===0) {\n                mobileCountryCode.value = \"\";\n            }\n        }\n    };\n\n    const handleChange = () => {\n        if (type===\"otp\") {\n            setValue(getValue().split(\"\").filter(x => /\\d/.test(x)).filter((_,index) => index<otpLength).join(\"\"));\n        }\n        interfaceToForm.signalChange();\n        const newValue = getDiffersFromInitialValue();\n        if (newValue!==lastDiffersFromInitialValueRef.current) {\n            lastDiffersFromInitialValueRef.current = newValue;\n            interfaceToForm.signalDiffersFromInitialValueChange();\n        }\n        if (onChange) onChange(getValue());\n    };\n\n    const handleFocus = () => {\n        hasFocus.value = true;\n    };\n    const handleBlur = () => {\n        hasFocus.value = false;\n        onBlur();\n    };\n\n    const styles: CSSProperties = {\n        textAlign: align\n    };\n\n    const innerStyles: CSSProperties = {\n        ...((typeof maxWidth===\"number\")?{maxWidth}:{})\n    };\n\n    const mobilePlusRef = useRef<HTMLDivElement>();\n    const mobileInputPaddingLeft = useSmartState(12);\n\n    const typeMap = {\n        text: \"text\",\n        password: \"password\",\n        mobile: \"text\",\n        hidden: \"hidden\",\n        otp: \"text\",\n        checkbox: \"checkbox\"\n    };\n\n    useEffect(() => {\n        const { toCallOnFirstEffect } = interfaceToForm;\n        if (toCallOnFirstEffect) toCallOnFirstEffect();\n    },[]);\n\n    useEffect(() => {\n        if ((type===\"mobile\") && (mobilePlusRef.current)) {\n            mobileInputPaddingLeft.value = scalePixelToRem(mobilePlusRef.current.offsetWidth)+17;\n        }\n    },[mobileCountryCode.value]);\n\n    const inputStyles: CSSProperties = {\n        ...((type===\"mobile\")?{paddingLeft: `${mobileInputPaddingLeft.value}rem`}:{})\n    };\n\n    const handleCheckboxLabelClicked = () => {\n        misc.setInputElementChecked(inputRef,!misc.getInputElementChecked(inputRef));\n        handleChange();\n        misc.focusInputElement(inputRef);\n    };\n\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()} style={styles}>\n                <div className=\"inner\" style={innerStyles}>\n                    {(type===\"select\")?(\n                        <select \n                            ref={selectRef} \n                            onChange={handleChange}\n                            disabled={disabled.value}\n                            onKeyDown={(e) => handleKeyDown(e.key,() => e.preventDefault())}\n                            onFocus={handleFocus}\n                            onBlur={handleBlur}\n                            >\n                            {selectOptions.map(({caption,value,disabled = false},index) => <option key={`${value}-${index}`} value={value} {...(disabled?{disabled: true}:{})}>{caption}</option>)}\n                        </select>\n                    ):(\n                        <input \n                            ref={inputRef}\n                            type={typeMap[type]} \n                            {...(captionPosition===\"placeholder\")?{placeholder: caption+(!required?\" (optional)\":\"\")}:{placeholder}}\n                            onKeyDown={(e) => handleKeyDown(e.key,() => e.preventDefault())}\n                            onChange={handleChange}\n                            onFocus={handleFocus}\n                            onBlur={handleBlur}\n                            disabled={disabled.value}\n                            style={inputStyles}\n                        />\n                    )}\n                    {(type===\"mobile\")?(\n                        <div className=\"mobile-plus \" ref={mobilePlusRef}>+ {(mobileCountryCode.value!==\"\")?<span className=\"country-code\">{mobileCountryCode.value}</span>:\"\"}</div>\n                    ):\"\"}\n                    <div className=\"border\"></div>\n                    {((captionPosition===\"header\") && (type!==\"hidden\") && (type!==\"otp\"))?(\n                        <div className=\"caption-back\">\n                            <div className=\"caption\">\n                                {caption}{!required?<span className=\"caption-optional\">&nbsp;(optional)</span>:\"\"}\n                                {(type===\"checkbox\")?(\n                                    <EventPane onClick={handleCheckboxLabelClicked} />\n                                ):\"\"}\n                            </div>\n                        </div>\n                    ):\"\"}\n                    {((type===\"otp\"))?(\n                        <div className=\"otp-bars\">\n                            {\"_\".repeat(otpLength)}\n                        </div>\n                    ):\"\"}                    \n                </div>\n            </div>\n            <style jsx>{`\n            .inner {\n                display: inline-block;\n                width: 100%;\n                position: relative;      \n                --border-radius: 3rem;  \n            }\n            .input {\n                margin-bottom: 20rem;                \n            }\n\n            .country-code {\n                color: #fff;\n                background-color: #9999b2;\n                padding: 2rem 7rem;\n                border-radius: 3rem;\n                font-size: 12rem;\n                position: relative;\n                top: -1rem;\n            }\n\n            .border {\n                position: absolute;\n                --overlap: -1rem;\n                --overlap-verti: var(--overlap);\n                --overlap-hori: var(--overlap);\n                left: var(--overlap-hori);\n                top: var(--overlap-verti);\n                right: var(--overlap-hori);\n                bottom: var(--overlap-verti);\n                pointer-events: none;\n                border-radius: var(--border-radius);\n                display: none;\n            }\n\n            .type-is-checkbox .border {\n                --overlap-verti: -7rem;\n                --overlap-hori: -1rem;\n                transform: translateY(-1rem);\n                display: none;\n            }\n\n            .type-is-hidden {\n                margin-bottom: 0rem;\n                height: 0rem;\n                overflow: hidden;\n            }\n\n            .caption-back {\n                position: absolute;\n                left: 10rem;\n                top: -1rem;                \n                padding: 0rem 4rem;\n                border-top: 2rem solid var(--input-backcolor);      \n                pointer-events: none;          \n            }\n\n            .caption-optional {\n                color: #aaa;\n            }\n\n            .caption {\n                position: relative;\n                top: -10rem;\n                font-size: 11rem;\n                color: var(--input-textcolor);                                \n                pointer-events: none;          \n            }\n\n            .type-is-checkbox .caption-back {\n                border-top: none;\n                pointer-events: auto;\n\n            }\n\n            .type-is-checkbox .caption {\n                top: 3rem;\n                left: 10rem;\n                visibility: visible;\n                pointer-events: auto;\n            }\n            .type-is-checkbox .caption-back {\n                visibility: hidden;\n            }\n\n            .type-is-checkbox .caption-optional {\n                display: none;\n            }\n\n            input,select {\n                background-color: var(--input-backcolor);\n                border: 1rem solid var(--input-bordercolor);\n                border-radius: var(--border-radius);\n                padding: 12rem 10rem;\n                width: 100%;                \n                outline: none;\n                color: var(--input-textcolor);\n                font-size: 14rem;\n                font-family: Arial;\n            }\n\n            input[type=\"checkbox\"] {\n                width: auto;\n            }\n\n            .otp-bars {\n                position: absolute;\n                top: 18rem;\n                left: 10rem;\n                font-size: 24rem;\n                letter-spacing: 10rem;\n                pointer-events: none;\n                font-family: Arial;\n                color: var(--input-textcolor);\n                opacity: 0.8;\n            }\n\n            /*\n            .type-is-mobile input {\n                padding-left: 22rem;\n            }\n            */\n\n            .type-is-otp input {\n                border: none;\n                background-color: transparent;\n                font-size: 24rem;\n                letter-spacing: 10rem;\n            }\n\n            .disabled input,.disabled select {\n                background-color: var(--input-disabled-backcolor);\n            }\n\n            input::placeholder,select::placeholder {\n                color: var(--input-placeholder-textcolor);\n            }\n            \n            .has-focus .border {\n                border: 2rem solid var(--input-focus-bordercolor);\n                display: block;\n            }\n\n            .type-is-checkbox .border {\n                display: none;\n            }\n\n            .type-is-checkbox.has-focus .caption {\n                color: var(--input-focus-bordercolor);\n            }\n\n            .error input,.error select {\n                color: var(--error-color);\n            }\n\n            .error .border {\n                border: 2rem solid var(--error-color);\n                display: block;\n            }\n\n            .error .caption {\n                color: var(--error-color);\n                font-weight: 600;\n            }\n\n            .mobile-plus {\n                position: absolute;\n                left: 12rem;\n                top: 10rem;\n                font-size: 15rem;\n                color: var(--input-textcolor);\n            }\n\n            `}</style>\n        </>\n    );\n}","import { CSSProperties } from \"react\";\nimport { useCssStateManager } from \"../../../hooks/use_css_state_manager\";\nimport { useForm } from \"./form\";\n\nexport type PProps = {\n    children: any;\n    small?: boolean;\n    pale?: boolean;\n};\n\nexport default function P({children,small = false,pale = false}:PProps) {\n    const cssStateManager = useCssStateManager([\"p\"]);\n\n    const { align } = useForm();\n\n    const styles: CSSProperties = { \n        textAlign: align,\n        ...(small?{fontSize: \"13rem\"}:{}),\n        ...(pale?{color: \"#666\"}:{})\n    };\n\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()} style={styles}>{children}</div>\n            <style jsx>{`\n            .p {\n                font-size: 15rem;\n                color: var(--text-color);\n                margin-bottom: 20rem;\n            }\n            `}</style>\n        </>\n    );\n}","import { CSSProperties } from \"react\";\nimport { useSmartState } from \"../../../hooks/use_smart_state\";\nimport { Button,AlternateButton } from \"./button\";\nimport { useForm } from \"./form\";\nimport { useCssStateManager } from \"../../../hooks/use_css_state_manager\";\n\nexport type SubmitButtonProps = {\n    caption: string;\n    disableIfUnchanged?: string[];\n    disableIfOtpNotComplete?: string;\n    name?: string;\n    inline?: boolean;\n    alternate?: boolean;\n    fixedWidth?: number;\n};\n\nexport default function SubmitButton({caption,disableIfUnchanged = [],disableIfOtpNotComplete = \"\",name,inline = false,alternate = false,fixedWidth}:SubmitButtonProps) {\n    const { useSubmit,submit,align } = useForm();\n\n    const cssStateManager = useCssStateManager([\"button-wrapper\"])\n    cssStateManager.useProperty(inline,\"is-inline\");\n\n    const disabled = useSmartState(false);\n\n    useSubmit(() => ({\n        getDisabledState() {\n            return disabled;\n        },\n        getDisableIfUnchanged() {\n            return disableIfUnchanged;\n        },\n        getDisableIfOtpNotComplete() {\n            return disableIfOtpNotComplete;\n        }\n    }),name);\n\n    const styles: CSSProperties = {\n        textAlign: align\n    };    \n\n    const SelectedButton = alternate?AlternateButton:Button;\n\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()} style={styles}>\n                <SelectedButton caption={caption} disabled={disabled.value} onClick={() => submit(name)} fixedWidth={fixedWidth} />\n            </div>\n            <style jsx>{`\n            .button-wrapper {\n\n            }\n\n            .is-inline {\n                display: inline-block;\n            }\n            `}</style>\n        </>\n    );\n}","import { useContext } from \"react\";\nimport { LayoutStateContext } from \"../../contexts/layout_state\";\n\nexport default function MobileScope({children}:{children: any}) {\n    const { mobileDetect: { isActive: isMobileActive } } = useContext(LayoutStateContext);\n    return isMobileActive.current?children:null;\n}","import { useCssStateManager } from \"../../../hooks/use_css_state_manager\";\nimport { useCustomRouter } from \"../../../hooks/use_custom_router\";\nimport { EventPane } from \"../../core/event_pane\";\nimport MobileScope from \"../mobile-scope\";\nimport { useForm } from \"./form\";\n\nexport type TitleProps = {\n    children: any;\n};\n\nexport default function Title({children}:TitleProps) {\n    const cssStateManager = useCssStateManager([\"title\"]);\n    const router = useCustomRouter();\n\n    const { renderParentNav } = useForm();\n\n    const genHandleBackClick = (path: string) => {\n        return () => {\n            router.push(path);\n        };\n    };\n\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()}>\n                {children}\n                {renderParentNav(({path}) => (\n                    <MobileScope>\n                        <div className=\"back-button\">\n                            <i className=\"icon-navbar-left-arrow\" />\n                            <EventPane onClick={genHandleBackClick(path)} />\n                        </div>\n                    </MobileScope>\n                ))}                \n            </div>\n            <style jsx>{`\n            .title {\n                color: var(--text-color);\n                text-align: center;\n                font-size: 22rem;\n                font-weight: 600;\n                position: relative;\n                margin-bottom: 25rem;\n            }\n\n            .back-button {\n                --size: 40rem;\n                position: absolute;\n                left: -10rem;\n                top: -5rem;\n                width: var(--size);\n                height: var(--size);                    \n                display: flex;\n                justify-content: center;\n                align-items: center;                    \n            }\n\n            .back-button i {\n                display: block;\n                font-size: 20rem;\n                color: #777;\n            }\n\n            .back-button.touchdown {\n                background-color: rgba(0,0,0,0.07);\n            }\n\n            `}</style>\n        </>\n    );\n}"],"names":["Box","children","border","desktopWidth","cssStateManager","useCssStateManager","useProperty","mobileDetect","useContext","LayoutStateContext","widthCutoffStyleSection","div","getClassNames","Button","styledButton","display","fontSize","backgroundColorCssVarName","colorCssVarName","AlternateButton","Input","type","name","initialValue","otpLength","selectOptions","onChange","callOnChangeOnInit","initialSelectedIndex","caption","placeholder","required","onKeyDown","onBlur","scalePixelToRem","error","useState","disabled","hasFocus","mobileCountryCode","useSmartState","lastDiffersFromInitialValueRef","useRef","inputRef","selectRef","useForm","input","maxWidth","captionPosition","useInput","align","getValue","misc","value","setValue","parts","includes","split","countryCode","number","slice","join","trim","getDiffersFromInitialValue","interfaceToForm","focus","getName","signalInitialized","getErrorState","getInitialValue","getType","setSelectedIndex","getInitialSelectedIndex","getIsHidden","getDisabledState","getOtpIsComplete","length","makeup","makeupCaption","makeupPlaceholder","makeupRequired","handleKeyDown","key","preventDefault","mustPreventEnter","signalKeyDownEnter","handleChange","filter","x","test","_","index","signalChange","newValue","current","signalDiffersFromInitialValueChange","handleFocus","handleBlur","styles","textAlign","innerStyles","mobilePlusRef","mobileInputPaddingLeft","useEffect","toCallOnFirstEffect","offsetWidth","inputStyles","paddingLeft","style","select","ref","e","onFocus","map","option","text","password","mobile","hidden","otp","checkbox","span","EventPane","onClick","repeat","P","small","pale","color","SubmitButton","disableIfUnchanged","disableIfOtpNotComplete","inline","alternate","fixedWidth","useSubmit","submit","getDisableIfUnchanged","getDisableIfOtpNotComplete","SelectedButton","MobileScope","isActive","Title","router","useCustomRouter","renderParentNav","genHandleBackClick","path","push","i"],"sourceRoot":""}