{"version":3,"file":"static/chunks/pages/login-e8f87c9dda13bd28.js","mappings":"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","sources":["webpack://_N_E/?f1d5","webpack://_N_E/./components/common/form/page.tsx","webpack://_N_E/./components/common/form/text-link.tsx","webpack://_N_E/./components/common/spacer.tsx","webpack://_N_E/./components/common/unsecure_page.tsx","webpack://_N_E/./lib/shared/form-request-makeup/requests/login.ts","webpack://_N_E/./pages/login.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/login\",\n      function () {\n        return require(\"private-next-pages/login.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/login\"])\n      });\n    }\n  ","import { useCssStateManager } from \"../../../hooks/use_css_state_manager\";\n\nexport type PageProps = {\n    children: any;\n    secure?: boolean;\n};\n\nexport default function Page({children,secure = true}:PageProps) {\n    const cssStateManager = useCssStateManager([\"page-wrapper\"]);\n    cssStateManager.useProperty(secure,\"secure\");\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()}>{children}</div>\n            <style jsx>{`\n            .page-wrapper {\n                /* min-height: 600rem; */\n                width: 100%;\n                color: #333;\n                padding: 50rem 40rem;\n                padding-top: 50rem;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            .secure {\n\n            }\n            `}</style>\n        </>\n    );\n}","import { useCssStateManager } from \"../../../hooks/use_css_state_manager\";\nimport { useCustomRouter } from \"../../../hooks/use_custom_router\";\nimport { styledButton } from \"../button\";\nimport { TextButton } from \"../text-button\";\n\nexport type TextLinkProps = {\n    caption: string;\n    path: string;\n};\n\nexport default function TextLink({caption,path}:TextLinkProps) {\n    const router = useCustomRouter();\n\n    const handleClick = () => {\n        router.push(path);\n    };\n\n    return (\n        <>\n            <div className=\"text-link\">\n                <TextButton caption={caption} onClick={handleClick} />\n            </div>\n            <style jsx>{`\n            .text-link {\n                display: inline-block;\n            }\n            `}</style>\n        </>\n    );\n}","import { CSSProperties } from \"react\";\nimport { useCssStateManager } from \"../../hooks/use_css_state_manager\";\n\nexport type SpacerProps = {\n    type?: \"vertical\" | \"horizontal\";\n    size: number;\n};\n\nexport default function Spacer({type = \"vertical\",size}:SpacerProps) {\n    const cssStateManager = useCssStateManager([\"spacer\"]);\n    cssStateManager.useProperty(type===\"vertical\",\"type-is-vertical\");\n    cssStateManager.useProperty(type===\"horizontal\",\"type-is-horizontal\");\n    const styles: CSSProperties = {\n        ...((type===\"vertical\")?{height: `${size}rem`}:{width: `${size}rem`}),\n        display: (type===\"vertical\")?\"block\":\"inline-block\"\n    };\n    return <div style={styles}></div>;\n}","import { ReactElement } from \"react\";\nimport { useSmartState } from \"../../hooks/use_smart_state\";\nimport { useCustomRouter } from \"../../hooks/use_custom_router\";\nimport { consumeAccount } from \"../../hooks/use_account\";\nimport { libAccountTestMode } from \"../../lib/account-test-mode\";\n\nexport function unsecurePage<T>(Component: (props: {}) => ReactElement) {\n    return function() {\n        const show = useSmartState(false);\n        const router = useCustomRouter();\n    \n        consumeAccount((accountValue) => {\n            if (accountValue) {\n                router.push(\"/account\");\n            }\n            else {\n                show.value = true;\n            }\n        });\n    \n        return show.value?<Component />:<div style={{height: \"1000rem\"}}></div>;\n    };\n};","import { FormRequestMakeup } from \"../types\";\n\ntype NameValues = {\n    email: string;\n    password: string;\n};\n\nconst _formRequestLogin: FormRequestMakeup<NameValues> = {\n    trimValues: [\"email\"],\n    inputs: {\n        email: {\n            caption: \"Email\",\n            required: true,\n            validation: \"email\"\n        },\n        password: {\n            caption: \"Password\",\n            required: true,\n            validation: \"min:6\"\n        }\n    },\n    relativeUrl: \"/users/login?action=login\",\n};\n\nexport const formRequestLogin = _formRequestLogin as FormRequestMakeup;","import { useContext } from \"react\";\nimport { LayoutStateContext } from \"../contexts/layout_state\";\nimport { AccountSession, AccountUser, consumeAccount, getLastLoginEmail } from \"../hooks/use_account\";\nimport { unsecurePage } from \"../components/common/unsecure_page\";\nimport Page from \"../components/common/form/page\";\nimport Form from \"../components/common/form/form\";\nimport Title from \"../components/common/form/title\";\nimport Box from \"../components/common/form/box\";\nimport P from \"../components/common/form/p\";\nimport Input from \"../components/common/form/input\";\nimport SubmitButton from \"../components/common/form/submit-button\";\nimport { formRequestLogin } from \"../lib/shared/form-request-makeup/requests/login\";\nimport TextLink from \"../components/common/form/text-link\";\nimport Spacer from \"../components/common/spacer\";\n\nexport type LoginPageProps = {\n};\n\nconst LoginPage = unsecurePage(function({}:LoginPageProps) {\n    const { loginPreloadedEmail,loginPreloadedType,clearLoginPreloaded } = useContext(LayoutStateContext);    \n\n    const account = consumeAccount();\n\n    return (\n        <Page>\n            <Form \n                requestMakeup={formRequestLogin}\n                autoFocus\n                align=\"center\"\n                input={{\n                    maxWidth: 400,\n                    captionPosition: \"placeholder\"\n                }}\n                onSuccess={({user,session}: {user: AccountUser,session: AccountSession}) => {\n                    account.value = {\n                        user,\n                        session\n                    };\n                    return {\n                        type: \"redirect\",\n                        path: \"/account\"\n                    };\n                }}\n                initializeCb={() => {\n                    const lastLoginEmail = getLastLoginEmail();\n                    if (loginPreloadedEmail) {\n                        clearLoginPreloaded();\n                    }\n                    if (loginPreloadedEmail || lastLoginEmail) {\n                        return {\n                            inputInitialValues: {\n                                email: loginPreloadedEmail || lastLoginEmail\n                            },\n                            autoFocus: \"password\",\n                            ...(loginPreloadedType?{\n                                message: {\n                                    value: (loginPreloadedType===\"activated\")?\n                                        \"Your account has been activated. Enter your password below to login.\":\n                                        \"Your password has been reset. Enter it below to login.\",\n                                    permanent: true\n                                }\n                            }:{})\n                        };\n                    }\n                }}\n            >\n                <Title>Login</Title>\n                <Box>\n                    <P>\n                        Don't have an account yet? <TextLink path=\"/register\" caption=\"Register\" />\n                    </P>\n                    <Input name=\"email\" />\n                    <Input name=\"password\" type=\"password\" />\n                    <SubmitButton caption=\"Login\" />\n                    <Spacer size={20} />\n                    <P>\n                        Forgot your password? <TextLink path=\"/reset-password\" caption=\"Reset\" /> it.\n                    </P>\n                </Box>\n            </Form>                    \n        </Page>    \n    );\n});\n\nexport default LoginPage;"],"names":["window","__NEXT_P","push","Page","children","secure","cssStateManager","useCssStateManager","useProperty","div","getClassNames","TextLink","caption","path","router","useCustomRouter","TextButton","onClick","Spacer","type","size","styles","height","width","display","style","unsecurePage","Component","show","useSmartState","consumeAccount","accountValue","value","formRequestLogin","trimValues","inputs","email","required","validation","password","relativeUrl","useContext","LayoutStateContext","loginPreloadedEmail","loginPreloadedType","clearLoginPreloaded","account","Form","requestMakeup","autoFocus","align","input","maxWidth","captionPosition","onSuccess","user","session","initializeCb","lastLoginEmail","getLastLoginEmail","inputInitialValues","message","permanent","Title","Box","P","Input","name","SubmitButton"],"sourceRoot":""}