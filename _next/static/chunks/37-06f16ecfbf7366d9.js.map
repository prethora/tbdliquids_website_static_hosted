{"version":3,"file":"static/chunks/37-06f16ecfbf7366d9.js","mappings":"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","sources":["webpack://_N_E/./components/common/secure_page.tsx","webpack://_N_E/./hooks/use_status_message.tsx","webpack://_N_E/./lib/server_requests.ts","webpack://_N_E/./node_modules/@swc/helpers/src/_instanceof.mjs"],"sourcesContent":["import { ReactElement, createContext, useContext } from \"react\";\nimport { useCssStateManager } from \"../../hooks/use_css_state_manager\";\nimport { SmartState, useSmartState } from \"../../hooks/use_smart_state\";\nimport { useCustomRouter } from \"../../hooks/use_custom_router\";\nimport { Account, consumeAccount, useAccount } from \"../../hooks/use_account\";\nimport CenteredSpinner from \"./centered-spinner\";\nimport { misc } from \"../../lib/misc\";\nimport { InlineButton } from \"./button\";\nimport { RequestErrorCustom, RequestErrorNoNetworkConnection, RequestErrorPermissionDenied, SECURE_REFRESH_AFTER_MINUTES, postRequest, secureRefreshState } from \"../../lib/server_requests\";\nimport { useRouter } from \"next/router\";\nimport { StatusMessage, useStatusMessage } from \"../../hooks/use_status_message\";\n\nexport const SecurePageContext = createContext<boolean>(false);\n\nexport const useIsSecurePage = () => {\n    return useContext(SecurePageContext);\n};\n\nexport type RedirectDirective = {\n    path: string;\n    message?: StatusMessage; \n};\n\nexport function securePage<T>(\n        Component: (props: {result: T; account: SmartState<Account | null>}) => ReactElement,\n        originalRelativeUrl?: string,\n        { onBeforeLoad = () => {} }: {onBeforeLoad?: (result: T, account: SmartState<Account | null>,query: {[name: string]: string}) => RedirectDirective | void} = {}\n    ) {\n    return function() {\n        const cssStateManager = useCssStateManager([\"secure-page\"]);\n        const result = useSmartState<T | null>(null);\n        const connectionError = useSmartState(false);\n        const reactRouter = useRouter();                \n        const unexpectedError = useSmartState(\"\");\n        \n        const router = useCustomRouter();\n        const statusMessage = useStatusMessage(true);\n        const account = consumeAccount((accountValue) => {\n            attempt(accountValue);\n        });    \n\n        cssStateManager.useProperty((result.value===null) || !account.value,\"not-loaded\");\n\n        const attempt = async (accountValue: Account) => {   \n            if (accountValue===null) {\n                router.push(\"/login\");\n            }\n            else {\n                if ((!accountValue.user.firstName) && (!accountValue.user.lastName)) {\n                    const redirectToPath = \"/account/first-login/profile\";\n                    if (!reactRouter.asPath.startsWith(redirectToPath)) {\n                        router.push(redirectToPath);\n                    }   \n                    else {\n                        result.value = {} as T;\n                    }                 \n                }\n                else if ((accountValue.user.addresses.length===0) && (!accountValue.user.addressSetupSkipped)) {\n                    const redirectToPath = \"/account/first-login/address\";\n                    if (!reactRouter.asPath.startsWith(redirectToPath)) {\n                        router.push(redirectToPath);\n                    }   \n                    else {\n                        result.value = {} as T;\n                    }                 \n                }\n                else {\n                    const finalize = (value: T) => {        \n                        const queryParams = misc.getQueryParams();                \n                        const redirectDirective = onBeforeLoad(value,account as SmartState<Account>,queryParams as {[name: string]: string});\n                        if (redirectDirective) {\n                            if (redirectDirective.message) statusMessage.loadMessage(redirectDirective.message);\n                            router.push(redirectDirective.path);\n                        }\n                        else {\n                            result.value = value;\n                        }\n                    };\n\n                    let relativeUrl = originalRelativeUrl;\n                    const input = misc.getQueryParams();\n                    try {                                        \n                        if ((!relativeUrl) && (SECURE_REFRESH_AFTER_MINUTES>-1)) {\n                            const timespan = (new Date()).getTime()-secureRefreshState.lastRefreshTimestamp;\n                            if (timespan>=SECURE_REFRESH_AFTER_MINUTES*60*1000) {                            \n                                relativeUrl = \"/users/account?action=refresh\";\n                            }\n                        }\n                        if (relativeUrl) {\n                            const { result: _result,newAccountValue } = await postRequest(accountValue,relativeUrl,input);\n    \n                            if (newAccountValue) {\n                                account.value = newAccountValue;\n                            }\n                            finalize(_result);\n                        }\n                        else {\n                            finalize({} as T);\n                        }\n                    }\n                    catch(err: unknown) {\n                        if (err instanceof RequestErrorPermissionDenied) {\n                            account.value = null;\n                            router.push(\"/login\");\n                        }\n                        else if (err instanceof RequestErrorNoNetworkConnection) {\n                            connectionError.value = true;\n                        }\n                        else if (err instanceof RequestErrorCustom) {\n                            unexpectedError.value = err.message;\n                        }\n                    }                        \n                }\n            }\n        };\n\n        const handlerRetryClick = () => {\n            connectionError.value = false;\n            attempt(account.value as Account);\n        };\n\n        return (\n            <>\n                <div className={cssStateManager.getClassNames()}>\n                    {(result.value && account.value)?(<>\n                        <SecurePageContext.Provider value={true}>\n                            <Component result={result.value} account={account as SmartState<Account | null>} />\n                        </SecurePageContext.Provider>\n                    </>):(\n                        <>\n                            {(unexpectedError.value!==\"\")?(\n                                <>\n                                    <div className=\"error\">\n                                        error: {unexpectedError.value}\n                                    </div>                                    \n                                </>\n                            ):(connectionError.value?(\n                                <>\n                                    <div className=\"error\">\n                                        Network error: make sure you are connected to the internet.\n                                        <div className=\"button\">\n                                            <InlineButton caption=\"Retry\" onClick={handlerRetryClick} />\n                                        </div>\n                                    </div>\n                                </>\n                            ):<CenteredSpinner />)}\n                        </>\n                    )}\n                </div>\n                <style jsx>{`\n                .secure-page {                    \n                    color: #333;\n                    padding: 50rem 40rem;\n                    padding-top: 20rem;\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    flex-wrap: wrap;\n                }\n\n                .not-loaded {\n                    /* min-height: 600rem; */\n                }\n\n                .error {\n                    color: #d20505;\n                    text-align: center;\n                }\n\n                .button {\n                    margin-top: 20rem;\n                }\n                `}</style>\n            </>\n        );\n    };\n};","import { CSSProperties, useContext, useEffect, useRef } from \"react\";\nimport { LayoutStateContext } from \"../contexts/layout_state\";\nimport { useCssStateManager } from \"./use_css_state_manager\";\nimport { useResizeObserver } from \"./use_resize_observer\";\nimport { useSmartState } from \"./use_smart_state\";\n\nexport type StatusMessageType = \"error\" | \"info\";\n\ntype StatusMessageProps = {\n    color: string;\n    message: string;\n    show: boolean;\n};\n\nexport type StatusMessage = {\n    type: \"info\" | \"error\";\n    message: string;\n    permanent?: boolean;\n};\n\nfunction StatusMessage({color,message,show}:StatusMessageProps)\n{\n    const cssStateManager = useCssStateManager([\"status-message\"]);\n    const showRef = useRef(show);\n    showRef.current = show;\n\n    const { scalePixelToRem } = useContext(LayoutStateContext);\n\n    const height = useSmartState(0);\n    const innerRef = useResizeObserver(() => {\n        if (showRef.current) {\n            syncHeightToInner();\n        }\n    });\n\n    const syncHeightToInner = () => {\n        if (innerRef.current) {\n            const { current: innerElem } = innerRef;\n            height.value = scalePixelToRem(innerElem.offsetHeight);            \n        }\n    };\n\n    useEffect(() => {\n        if (show) {\n            syncHeightToInner();\n        }\n        else {\n            height.value = 0;\n        }\n    },[show])\n\n    const styles: CSSProperties = {\n        height: `${height.value}rem`,\n        color\n    };\n\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()} style={styles}>\n                <div ref={innerRef} className=\"inner\">\n                    {message}\n                </div>                \n            </div>\n            <style jsx>{`\n            .status-message {\n                overflow: hidden;\n                transition: height 0.4s;\n                font-weight: 600;\n            }\n\n            .inner {\n                width: 100%;\n                text-align: center;\n                padding-bottom: 25rem;\n            }\n\n            `}</style>\n        </>\n    );\n}\n\nlet loadedStatusMessage: StatusMessage;\n\nexport const useStatusMessage = (headless = false) => {\n    const color  = useSmartState(\"\");\n    const message = useSmartState(\"This is the test message\");\n    const show  = useSmartState(false);\n    const closeAfterTimeoutHandle = useRef(0);    \n\n    const defaultColorTable = {\n        \"error\": \"#dc0303\",\n        \"info\": \"#7c79e4\"\n    };    \n\n    const component = <StatusMessage message={message.value} show={show.value} color={color.value} />;\n\n    useEffect(() => {\n        if ((loadedStatusMessage) && (!headless)) {\n            const copy = loadedStatusMessage;\n            loadedStatusMessage = null;\n            ret.showFromObject(copy);\n        }\n    },[]);\n\n    const ret = {\n        component,\n        loadMessage(message: StatusMessage){\n            loadedStatusMessage = message;\n        },\n        show(messageValue: string,{closeAfterMs = -1,colorValue = defaultColorTable[\"info\"]}: {closeAfterMs?: number;colorValue?: string} = {}){\n            clearTimeout(closeAfterTimeoutHandle.current);\n            closeAfterTimeoutHandle.current = 0;\n            color.value = colorValue;\n            message.value = messageValue;\n            show.value = true;\n            if (closeAfterMs>0) {\n                closeAfterTimeoutHandle.current = setTimeout(() => {\n                    ret.close();\n                },closeAfterMs) as unknown as number;\n            }\n        },\n        showFromObject({type,message,permanent}: StatusMessage) {\n            if (type===\"info\") {\n                ret.showInfo(message,!!permanent);\n            }\n            else {\n                ret.showError(message,(permanent===undefined) || permanent);\n            }\n        },\n        showError(messageValue: string,permanent = true) {\n            ret.show(messageValue,{\n                colorValue: defaultColorTable[\"error\"],\n                ...(permanent?{}:{closeAfterMs: 7000})\n            });\n        },\n        showInfo(messageValue: string,permanent = false) {\n            ret.show(messageValue,{\n                colorValue: defaultColorTable[\"info\"],\n                ...(permanent?{}:{closeAfterMs: 7000})\n            });\n        },\n        close() {\n            show.value = false;\n        }\n    };\n\n    return ret;\n};","import { Account } from \"../hooks/use_account\";\nimport serverRefs from \"../server-refs.json\";\nimport { misc } from \"./misc\";\n\nexport const SECURE_REFRESH_AFTER_MINUTES = 30;\n// export const SECURE_REFRESH_AFTER_MINUTES = -1;\n\nexport const secureRefreshState = {\n    lastRefreshTimestamp: 0,\n};\n\nexport class RequestErrorPermissionDenied {}\nexport class RequestErrorNoNetworkConnection {}\nexport class RequestErrorCustom {\n    constructor(public message: string,public inputNames: string[] = []) {}\n}\n\nexport const postRequest = async (accountValue: Account,relativeUrl: string,input: {[key: string]: any}) => {\n    const baseUrl = (process.env.NODE_ENV===\"development\")?\"http://localhost:9000\":serverRefs.apis.api;\n    let url = `${baseUrl}${relativeUrl}`;\n    let renewHash: string;    \n\n    while(true) {\n        const res = await (async () => {\n            const maxRetries = 5;\n            let retries = 0;\n            while(true) {\n                try {\n                    return await fetch(url,{\n                        method: \"POST\",\n                        headers: {\n                            \"Accept\": \"application/json\",\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            ...input,\n                            ...(accountValue?{\n                                session: {\n                                    userId: accountValue.user.accountNumber,\n                                    sessionId: accountValue.session.id,\n                                    ...(renewHash?{renewHash}:{})\n                                }\n                            }:{}),                            \n                        })\n                    });\n                }\n                catch(err) {\n                    if (retries<maxRetries) {\n                        retries++;\n                        await misc.sleep(500);\n                    }\n                    else {\n                        throw new RequestErrorNoNetworkConnection();\n                    }\n                }    \n            }\n        })();\n        const jsonRes = await res.json();\n        if (jsonRes?.type===\"error\") {\n            if ((accountValue) && (jsonRes.errorMessage===\"session-expired\")) {\n                renewHash = await misc.sha1Hash(`${accountValue.session.id}-${accountValue.user.accountNumber}-${accountValue.session.renewKey}`);\n            }\n            else {\n                if (jsonRes?.errorMessage===\"permission-denied\") {\n                    throw new RequestErrorPermissionDenied();\n                }\n                else {\n                    throw new RequestErrorCustom(jsonRes?.errorMessage || \"Unexpected response from server\",Array.isArray(jsonRes?.errorInputNames)?jsonRes?.errorInputNames:[]);\n                }                \n            }            \n        }\n        else if (jsonRes?.type===\"success\") {\n            delete jsonRes.type;            \n            let newAccountValue: Account;\n            if (accountValue) {\n                const { refreshUser } = jsonRes;\n                if ((renewHash) && (jsonRes.renewedSession)) {\n                    const { renewedSession } = jsonRes;\n                    newAccountValue = {\n                        user: refreshUser,\n                        session: renewedSession\n                    };\n                    delete jsonRes.renewedSession;                                        \n                }\n                else {\n                    newAccountValue = {\n                        user: refreshUser,\n                        session: accountValue.session\n                    };\n                }\n                secureRefreshState.lastRefreshTimestamp = (new Date()).getTime();\n                delete jsonRes.refreshUser;\n            }                                    \n            return {\n                result: jsonRes,\n                ...(newAccountValue?{newAccountValue}:{})\n            };\n        }\n        else {\n            throw new RequestErrorCustom(\"Unexpected response from server\");\n        }    \n    }\n};\n","export default function _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return !!right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}"],"names":["SecurePageContext","createContext","useIsSecurePage","useContext","securePage","Component","originalRelativeUrl","onBeforeLoad","cssStateManager","useCssStateManager","result","useSmartState","connectionError","reactRouter","useRouter","unexpectedError","router","useCustomRouter","statusMessage","useStatusMessage","account","consumeAccount","accountValue","attempt","useProperty","value","redirectToPath","finalize","relativeUrl","input","_result","newAccountValue","push","user","firstName","lastName","asPath","startsWith","addresses","length","addressSetupSkipped","queryParams","misc","redirectDirective","message","loadMessage","path","SECURE_REFRESH_AFTER_MINUTES","Date","getTime","secureRefreshState","postRequest","err","RequestErrorPermissionDenied","RequestErrorNoNetworkConnection","RequestErrorCustom","div","getClassNames","Provider","InlineButton","caption","onClick","CenteredSpinner","loadedStatusMessage","StatusMessage","color","show","showRef","useRef","current","LayoutStateContext","scalePixelToRem","height","innerRef","useResizeObserver","syncHeightToInner","innerElem","offsetHeight","useEffect","styles","style","ref","headless","closeAfterTimeoutHandle","defaultColorTable","component","copy","ret","showFromObject","messageValue","closeAfterMs","colorValue","clearTimeout","setTimeout","close","type","permanent","showInfo","showError","undefined","lastRefreshTimestamp","inputNames","baseUrl","url","renewHash","res","jsonRes","refreshUser","renewedSession","serverRefs","maxRetries","retries","fetch","method","headers","body","JSON","stringify","session","userId","accountNumber","sessionId","id","json","errorMessage","renewKey","Array","isArray","errorInputNames","_instanceof","left","right","Symbol","hasInstance"],"sourceRoot":""}