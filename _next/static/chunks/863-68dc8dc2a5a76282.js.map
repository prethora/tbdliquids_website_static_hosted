{"version":3,"file":"static/chunks/863-68dc8dc2a5a76282.js","mappings":"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","sources":["webpack://_N_E/./components/banner.tsx","webpack://_N_E/./components/core/scroll_animation.tsx","webpack://_N_E/./components/core/grid.tsx"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from 'react';\nimport { GlobalStateContext } from '../contexts/global_state';\nimport { TWindowSize, WindowSizeContext } from '../contexts/window_size';\nimport { EventPane } from './core/event_pane';\nimport { misc } from \"../lib/misc\";\nimport { useResizeObserver } from '../hooks/use_resize_observer';\nimport { ResizeObserverCallbackUpdate } from '../hooks/use_resize_observer/types';\nimport { LayoutStateContext } from '../contexts/layout_state';\nimport { Image } from './common/scaled-next-image';\n\nexport type TText = {\n    text: string;\n    left: number;\n    top: number;\n    family: string;\n    size: number;\n    weight: number;\n    color: string;\n    url?: string;\n    letterSpacing?: number;\n    paddingLeft?: number;\n    paddingRight?: number;\n};\n\nexport enum TBannerLayout {\n    Left,\n    Center,\n    Right\n};\n\ntype TProp = {\n    src: string;\n    aspectRatio: number;\n    height: number;\n    texts: TText[];\n    layout: TBannerLayout;\n    onImageShowing?: () => void;\n    onHeightReady?: () => void;\n    onResize?: (update: ResizeObserverCallbackUpdate<HTMLDivElement>) => void;\n    onClick?: () => void; \n};\n\nexport default function Banner({aspectRatio,src,height,texts,layout,onImageShowing = () => {},onHeightReady = () => {},onResize,onClick}:TProp)\n{\n    const [show,setShow] = useState(false);    \n    const { animation } = useContext(GlobalStateContext);\n    const { scaleFactor } = useContext(LayoutStateContext);\n    const _windowSize = useContext(WindowSizeContext);\n    const [actualHeight,_setActualHeight] = useState(0);\n    const [windowSize,setWindowSize] = useState<TWindowSize>({width: 0,height: 0});\n    const [textAspectRatios,setTextAspectRatios] = useState(Array.from(Array(texts.length)).map(() => 1));\n    const firstHeightSetRef = useRef(false);\n\n    const setActualHeight = (value: number) => \n    {\n        _setActualHeight(value);\n        if (!firstHeightSetRef.current)\n        {\n            firstHeightSetRef.current = true;\n            setTimeout(onHeightReady,0);\n        }\n    };\n\n    const percentageSize = (percentage: number,height = actualHeight) => (percentage/100)*height;\n\n    const getTextWidth = (index: number) => percentageSize(texts[index].size)*textAspectRatios[index];\n\n    useEffect(() => \n    {\n        setTextAspectRatios(texts.map(({ text,family,size,weight,letterSpacing }) => misc.getTextAspectRatio(text,family,weight,letterSpacing)));                \n    },[]);\n\n    useEffect(() => \n    {\n        setWindowSize(_windowSize);\n        if (layout===TBannerLayout.Center)\n        {\n            if ((_windowSize.width/height)<aspectRatio)\n            {\n                setActualHeight(_windowSize.width/aspectRatio);\n            }\n            else\n            {\n                setActualHeight(height);\n            }    \n        }\n        else\n        {\n            if (texts.length>0)\n            {\n                if (texts.length===1)\n                {\n                    const { text,family,size,weight,paddingLeft = 0,paddingRight = 0,letterSpacing } = texts[0];\n                    const firstTextWidth = misc.getTextWidth(text,family,percentageSize(size,height),weight,letterSpacing);\n\n                    const imageWidth = height*aspectRatio;\n                    const availableWidth = _windowSize.width-(imageWidth+paddingLeft+paddingRight);\n                    if (firstTextWidth<=availableWidth)\n                    {\n                        setActualHeight(height);\n                    }\n                    else\n                    {\n                        const firstTextAspectRatio = misc.getTextAspectRatio(text,family,weight,letterSpacing);\n                        setActualHeight((_windowSize.width-(paddingLeft+paddingRight))/(firstTextAspectRatio*(size/100)+aspectRatio));\n                    }    \n                }\n                else \n                {\n                    const getTextWidth = (index: number) =>\n                    {\n                        const { text,family,size,weight,letterSpacing } = texts[index];\n                        return misc.getTextWidth(text,family,percentageSize(size,height),weight,letterSpacing);\n                    };\n                    const getTextAspectRatio = (index: number) =>\n                    {\n                        const { text,family,weight,letterSpacing } = texts[index];\n                        return misc.getTextAspectRatio(text,family,weight,letterSpacing);\n                    };\n                    const firstTextWidth = getTextWidth(0);\n                    const secondTextWidth = getTextWidth(1);\n                    const firstTextAspectRatio = getTextAspectRatio(0);\n                    const secondTextAspectRatio = getTextAspectRatio(1);\n                    const firstSize = texts[0].size/100;\n                    const secondSize = texts[1].size/100;                                        \n                    const rs = (firstTextWidth>=secondTextWidth)?firstTextAspectRatio*firstSize:secondTextAspectRatio*secondSize;\n                    const c = Math.abs(firstTextAspectRatio*firstSize-secondTextAspectRatio*secondSize);                    \n                    const e = Math.max(Math.abs(texts[1].left)-1,0);\n                    const u = e*c*height/2;\n\n                    const { paddingLeft = 0,paddingRight = 0 } = texts[0];\n\n                    const imageWidth = height*aspectRatio;\n                    const availableWidth = _windowSize.width-(imageWidth+paddingLeft+paddingRight);\n\n                    if ((rs*height+u)<=availableWidth)\n                    {\n                        setActualHeight(height);\n                    }\n                    else\n                    {\n                        setActualHeight((_windowSize.width-(paddingLeft+paddingRight))/(rs+(e*c/2)+aspectRatio));\n                    }\n                }\n            }\n            else\n            {\n                setActualHeight(height);\n            }\n        }\n    \n    },[`${_windowSize.height}-${_windowSize.width}`,height]);\n\n    const width = actualHeight*aspectRatio;\n\n    const fadeInDuration = 2;\n\n    const imageLoadedHandler = () => \n    {        \n        setShow(true);\n        setTimeout(onImageShowing,fadeInDuration*1000/2);    \n    };\n    \n    const textFadeInDuration = 1.2;\n    const textShowRatio = 0.6;\n    const delayPerText = 1;\n\n    let textLefts = Array.from(Array(texts.length)).map(() => 0);\n\n    if ((layout!==TBannerLayout.Center) && (texts.length>0))\n    {\n        const firstTextWidth = getTextWidth(0);\n        const { left,paddingLeft = 0,paddingRight = 0 } = texts[0];\n        let rangeLeft = paddingLeft;\n        let rangeRight = (windowSize.width-width)-paddingRight;\n        const leftRatio = (Math.min(Math.max(left,-1),1)+1)/2;\n        if (layout===TBannerLayout.Left)\n        {\n            rangeLeft+= width;\n            rangeRight+= width;\n        }\n        const from = rangeLeft;\n        let firstTextBoundariesLeft = 0;\n        let firstTextBoundariesRight = 0;\n\n        if (texts.length===1)\n        {                        \n            const to = rangeRight-firstTextWidth;            \n            firstTextBoundariesLeft = from+(leftRatio*(to-from));\n        }\n        else \n        {\n            const secondTextWidth = getTextWidth(1);\n            const e = Math.max(Math.abs(texts[1].left)-1,0);\n            const u = e*Math.abs(firstTextWidth-secondTextWidth)/2;\n            const textBoxWidth = Math.max(firstTextWidth,secondTextWidth)+u;\n            const to = rangeRight-textBoxWidth;\n            const textBoxBoundariesLeft = from+(leftRatio*(to-from));\n            const textBoxBoundariesRight = textBoxBoundariesLeft+textBoxWidth;\n\n            if (firstTextWidth>=secondTextWidth)\n            {\n                if (texts[1].left<0)\n                {\n                    firstTextBoundariesLeft = textBoxBoundariesLeft+u;\n                }\n                else\n                {\n                    firstTextBoundariesLeft = textBoxBoundariesLeft;\n                }                \n            }\n            else \n            {\n                if (u>0)\n                {\n                    if (texts[1].left<0)\n                    {\n                        firstTextBoundariesLeft = textBoxBoundariesLeft;\n                    }\n                    else \n                    {\n                        firstTextBoundariesLeft = textBoxBoundariesRight-firstTextWidth;\n                    }\n                }\n                else \n                {\n                    const from = textBoxBoundariesLeft;\n                    const to = from+(secondTextWidth-firstTextWidth);\n                    const mid = (from+to)/2;\n                    firstTextBoundariesLeft = mid+((to-mid)*texts[1].left);\n                }\n            }            \n        }\n\n        firstTextBoundariesRight = firstTextBoundariesLeft+firstTextWidth;\n\n        textLefts[0] = firstTextBoundariesLeft;\n        texts.slice(1).forEach(({ left },_index) => \n        {\n            const index = _index+1;\n            const from = firstTextBoundariesLeft;\n            const to = firstTextBoundariesRight-getTextWidth(index);\n            const mid = (from+to)/2;\n            textLefts[index] = mid+((to-mid)*left);\n        });\n    }\n\n    const refOnResize = useResizeObserver(onResize,{ disabled: !onResize });\n\n    return (\n        <>\n            <div ref={refOnResize} className={`container${show?\" show\":\"\"}${animation?\"\":\" no-animation\"}`}\n                    style={{\n                        height: `${actualHeight}rem`,\n                        justifyContent: (layout==TBannerLayout.Left)?\"flex-start\":((layout==TBannerLayout.Right)?\"flex-end\":\"center\"),\n                        transition: show?`opacity ${fadeInDuration}s,visibility ${fadeInDuration}s`:\"none\"\n                    }}\n                >\n                <div className=\"frame\"\n                        style={{\n                            width: `${width}rem`\n                        }}\n                    >\n                    <Image src={src} width={width} height={actualHeight} onLoadingComplete={imageLoadedHandler} priority={true} />\n                    {layout===TBannerLayout.Center?(\n                        texts.map(({text,color,weight,family,size,left,top,url,letterSpacing = 0},index) => (\n                            <div key={index} className=\"text\" style={{\n                                color: color,\n                                fontFamily: family,\n                                fontWeight: weight,\n                                fontSize: `${percentageSize(size)}rem`,\n                                letterSpacing: `${letterSpacing*percentageSize(size)}rem`,\n                                left: `${left}%`,\n                                top: `${top}%`,\n                                ...(url?{cursor: \"pointer\"}:{}),\n                                transition: show?`opacity ${textFadeInDuration}s,visibility ${textFadeInDuration}s`:\"none\",\n                                transitionDelay: show?(fadeInDuration*textShowRatio+delayPerText*(index-0.2+(url?-0.3:0)))+\"s\":\"0s\"\n                            }}>{text}</div>\n                        ))\n                    ):\"\"}\n                </div>\n                {layout!==TBannerLayout.Center?(\n                        texts.map(({text,color,weight,family,size,left,top,url,letterSpacing = 0},index) => (                            \n                            <div key={index} className=\"text\" style={{\n                                color: color,\n                                fontFamily: family,\n                                fontWeight: weight,\n                                fontSize: `${percentageSize(size)}rem`,\n                                letterSpacing: `${letterSpacing*percentageSize(size)}rem`,\n                                left: textLefts[index],\n                                top: `${top}%`,\n                                ...(url?{cursor: \"pointer\"}:{}),\n                                transition: show?`opacity ${textFadeInDuration}s,visibility ${textFadeInDuration}s`:\"none\",\n                                transitionDelay: show?(fadeInDuration*textShowRatio+delayPerText*(index-0.2+(url?-0.3:0)))+\"s\":\"0s\"\n                            }}>{text}</div>\n                        ))\n                ):\"\"}\n                <div className=\"mobile-overlay\"></div>\n                <EventPane onClick={onClick} />\n            </div>\n            <style jsx>{`\n            .container {\n                width: 100%;\n                display: flex;\n                flex-direction: row;\n                opacity: 0;\n                visibility: hidden;\n                position: relative;\n            }\n\n            .mobile-overlay {\n                position: absolute;\n                left: 0rem;\n                top: 0rem;\n                width: 100%;\n                height: 100%;\n                background-color: rgba(0,0,0,0.075);\n                visibility: hidden;\n                opacity: 0;\n                --duration: var(--touch-duration);\n                transition: opacity var(--duration),visibility var(--duration);\n            }\n\n            .container.touchdown .mobile-overlay {\n                visibility: visible;\n                opacity: 1;\n            }\n\n            .container.no-animation,.container.no-animation .text\n            {\n                transition: none;\n            }            \n\n            .container.show\n            {\n                opacity: 1;\n                visibility: visible;\n            }\n\n            .frame {\n                height: 100%;\n                position: relative;\n            }\n\n            .text {\n                position: absolute;\n                white-space: nowrap;\n                opacity: 0;\n                visibility: hidden;\n            }\n\n            .container.show .text\n            {\n                opacity: 1;\n                visibility: visible;\n            }\n            `}</style>\n        </>\n    );\n}","import { useContext, useEffect, useRef, useState } from \"react\";\nimport { LayoutStateContext } from \"../../contexts/layout_state\";\nimport { WindowSizeContext } from \"../../contexts/window_size\";\nimport { misc } from \"../../lib/misc\";\n\nexport type ScrollAnimationProps = {\n    children?: JSX.Element;\n    threshold?: number;\n    animationDuration?: number;\n    processCounter?: number;\n};\n\nexport function ScrollAnimation({\n    children,\n    threshold = 0.6,\n    animationDuration = 0.7,\n    processCounter = 0}:ScrollAnimationProps)\n{\n    const containerRef = useRef<HTMLDivElement>();\n\n    const [show,setShow] = useState(false);\n    const { page } = useContext(LayoutStateContext);\n    const windowSize = useContext(WindowSizeContext);\n    const firstCalledRef = useRef(false);\n    const unregisterRef = useRef(() => {});\n\n    const processScreenRatio = () => \n    {\n        if (containerRef.current)\n        {\n            if (!firstCalledRef.current)\n            {\n                firstCalledRef.current = true;\n                setTimeout(processScreenRatio,100);\n                return;\n            }\n            const onScreenRatio = (() => \n            {\n                let { top,bottom,height } = containerRef.current.getBoundingClientRect();\n                if (height===0) return 0;                    \n                const { height: screenHeight } = misc.getWindowSize();\n                const isOnScreen = (value: number) => (value>=0) && (value<=screenHeight);\n                if ((isOnScreen(top)) && (isOnScreen(bottom))) return 1;\n                if ((!isOnScreen(top)) && (isOnScreen(bottom))) return bottom/height;\n                if ((isOnScreen(top)) && (!isOnScreen(bottom))) return (screenHeight-top)/height;\n                if ((!isOnScreen(top)) && (!isOnScreen(bottom))) \n                {\n                    if ((top<0) && (bottom>screenHeight)) return screenHeight/height;\n                    return 0;\n                }\n            })();\n            if (onScreenRatio>=threshold)\n            {\n                unregisterRef.current();\n                setShow(true);\n            }    \n        }\n    };\n\n    useEffect(() => \n    {\n        processScreenRatio();\n    },[windowSize,processCounter]);\n\n    useEffect(() => \n    {\n        const listener = () => \n        {            \n            processScreenRatio();\n        };\n        page.addEventListener(\"scroll\",listener);\n        setTimeout(listener,100);\n\n        let unregistered = false;\n\n        return unregisterRef.current = () => \n        {\n            if (!unregistered)\n            {\n                page.removeEventListener(\"scroll\",listener);\n                unregistered = true;\n            }\n        };\n    },[]);\n\n    return (\n        <>\n            <div ref={containerRef} className={`container${show?\" show\":\"\"}`} style={{\n                    transition: `opacity ${animationDuration}s,visibility ${animationDuration}s`\n                }}>\n                {children?children:\"\"}\n            </div>\n            <style jsx>{`\n            .container {\n                opacity: 0;\n                visibility: hidden;\n                width: 100%;\n                height: 100%;\n            }\n            .container.show {\n                opacity: 1;\n                visibility: visible;\n            }\n            `}</style>\n        </>\n    );\n}","import React, { useEffect, useLayoutEffect } from \"react\";\nimport { ScrollAnimation } from \"./scroll_animation\";\n\nexport type GridProps = {\n    children?: React.ReactElement[];\n    columns: number;\n    scrollAnimation?: boolean;\n    scrollAnimationThreshold?: number;\n    scrollAnimationDuration?: number;\n    processCounter?: number;\n    square?: boolean;\n    singleTopMargin?: number;\n    onReady?: () => void;\n    singleCentered?: boolean;\n    verticalCellSpacing?: number;\n    horizontalCellSpacing?: number | {fraction: number};\n    extendItemHeightBy?: number;\n};\n\nexport function Grid({\n    children = [],\n    columns,\n    verticalCellSpacing = 15,\n    horizontalCellSpacing = 15,\n    scrollAnimation = false,\n    scrollAnimationThreshold,\n    scrollAnimationDuration,\n    processCounter = 0,\n    square = false,\n    singleTopMargin = 0,\n    onReady = () => {},\n    singleCentered = false,\n    extendItemHeightBy = 0\n\n}: GridProps)\n{\n    useEffect(onReady,[]);\n\n    const isSingleCentered = ((children.length<columns) && (singleCentered));\n    const isSingle = (children.length<=columns);\n    const { itemWidthCalc,horizontalCellSpacingActual } = (() => {\n        if ((typeof horizontalCellSpacing===\"object\") && (typeof horizontalCellSpacing.fraction===\"number\"))\n        {\n            const total = (columns+(columns-1)*horizontalCellSpacing.fraction);\n            return {\n                // itemWidthCalc: `(${Math.round((1/total)*100000)/1000}%)`,\n                itemWidthCalc: `(${(1/total)*100}%)`,\n                horizontalCellSpacingActual: `(${(horizontalCellSpacing.fraction/total)*100}%)`\n            };\n        }\n        else\n        {\n            return {\n                itemWidthCalc: `((100% - (${horizontalCellSpacing}rem * ${columns-1}))/${columns})`,\n                horizontalCellSpacingActual: `(${horizontalCellSpacing}rem)`\n            };\n        }\n    })();    \n\n    return (\n        <>\n            <div className={\"grid\"+(square?\" square\":\"\")+(isSingleCentered?\" single-centered\":\"\")} style={{paddingTop: isSingle?singleTopMargin:0}}>\n                {children.map((item,index) => (\n                    <React.Fragment key={index}>\n                        <div className=\"item\" style={{\n                            width: `calc(${itemWidthCalc})`,\n                            ...(square?{padding: `calc(${itemWidthCalc} / 2)`}:{})\n                        }}>\n                            <div className=\"frame\"> \n                                {scrollAnimation?<ScrollAnimation processCounter={processCounter} threshold={scrollAnimationThreshold} animationDuration={scrollAnimationDuration}>{item}</ScrollAnimation>:item}\n                            </div>\n                        </div>\n                        {((index%columns!==columns-1) && !(isSingleCentered && (index===children.length-1)))?(\n                            <div className=\"column-spacer\" style={{\n                                width: `calc(${horizontalCellSpacingActual})`\n                            }}></div>\n                        ):((index<children.length-1)?(\n                            <div className=\"row-spacer\" style={{\n                                height: `${verticalCellSpacing}rem`\n                            }}></div>\n                        ):null)}\n                    </React.Fragment>\n                ))}\n            </div>\n            <style jsx>{`\n            .grid {\n                display: flex;\n                flex-direction: row;\n                flex-wrap: wrap;\n                width: 100%;\n            }\n\n            .grid.single-centered {\n                flex-wrap: nowrap;\n                justify-content: center;\n            }\n\n            .frame {\n                height: 100%;\n            }\n\n            .item {\n                box-sizing: border-box;\n                position: relative;\n                height: auto;\n            }\n            .grid.square .item .frame {\n                position: absolute;\n                left: 0rem;\n                top: 0rem;\n                width: 100%;\n                height: 100%;\n            }\n            \n            .column-spacer {\n                height: 0rem;\n            }\n\n            .row-spacer {\n                width: 100%;\n            }\n            `}</style>\n        </>\n    );    \n}"],"names":["Banner","aspectRatio","src","height","texts","layout","onImageShowing","onHeightReady","onResize","onClick","useState","show","setShow","useContext","GlobalStateContext","animation","_windowSize","LayoutStateContext","scaleFactor","WindowSizeContext","actualHeight","_setActualHeight","width","windowSize","setWindowSize","Array","from","length","map","textAspectRatios","setTextAspectRatios","firstHeightSetRef","useRef","setActualHeight","value","current","setTimeout","percentageSize","percentage","getTextWidth","index","size","useEffect","text","family","weight","letterSpacing","misc","TBannerLayout","Center","paddingLeft","paddingRight","firstTextWidth","imageWidth","firstTextAspectRatio","getTextAspectRatio","secondTextWidth","secondTextAspectRatio","firstSize","secondSize","rs","c","Math","abs","e","max","left","u","availableWidth","textFadeInDuration","textLefts","rangeLeft","rangeRight","leftRatio","min","Left","firstTextBoundariesRight","firstTextBoundariesLeft","textBoxWidth","textBoxBoundariesLeft","textBoxBoundariesRight","to","mid","slice","forEach","_index","refOnResize","useResizeObserver","disabled","div","ref","style","justifyContent","Right","transition","fadeInDuration","Image","onLoadingComplete","priority","color","top","url","fontFamily","fontWeight","fontSize","cursor","transitionDelay","EventPane","ScrollAnimation","children","threshold","animationDuration","processCounter","containerRef","page","firstCalledRef","unregisterRef","processScreenRatio","onScreenRatio","getBoundingClientRect","bottom","isOnScreen","screenHeight","listener","addEventListener","unregistered","removeEventListener","Grid","columns","verticalCellSpacing","horizontalCellSpacing","scrollAnimation","scrollAnimationThreshold","scrollAnimationDuration","square","singleTopMargin","onReady","singleCentered","extendItemHeightBy","isSingleCentered","isSingle","fraction","total","itemWidthCalc","horizontalCellSpacingActual","paddingTop","item","React","padding"],"sourceRoot":""}