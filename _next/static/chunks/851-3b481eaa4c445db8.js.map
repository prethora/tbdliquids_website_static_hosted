{"version":3,"file":"static/chunks/851-3b481eaa4c445db8.js","mappings":"+RAyBe,SAASA,EAAwB,G,IAACC,EAAD,EAACA,SAASC,EAAV,EAAUA,cAAa,EAAvB,EAAwBC,QAAAA,OAAO,IAAG,eAAQ,IAA1C,EAA2CC,SAAAA,OAAQ,IAAG,GAAK,EACjGC,GAAkBC,EAAAA,EAAAA,GAAmB,CAAC,4BAC5CD,EAAgBE,YAAYH,EAAS,YAErC,IAAMI,EAZyB,SAACC,EAAcP,GAK9C,OAJgCO,EAAMC,MAAM,+CAA6BC,KAAI,SAACC,G,MAAU,CACpFH,MAAOG,EACPC,YAAaX,EAAcU,EAAKE,mBASnBC,CAA2Bd,EAASe,MAAMd,GAE3D,OACI,sB,WACI,UAACe,MAAG,C,kCAAYZ,EAAgBa,iBAAe,I,UAC1CV,EAASG,KAAI,WAAmBQ,G,IAAjBV,EAAK,EAALA,MACNW,EADqB,EAATP,UACU,YAAY,GACxC,OAAO,SAACQ,OAAI,C,kCAAwBD,GAAS,I,SAAGX,GAA9BU,OAEtB,SAACF,MAAG,C,gDACJ,SAACK,EAAAA,EAAS,CAACnB,QAASA,Q,+pBC8tBhCoB,E,8BAhvBEC,EAAwB,CAC1B,CACE,QACA,QACA,OACA,OAEF,CACE,OACA,QACA,OACA,OAEF,CACE,MACA,UAEF,CACE,KACA,MACA,OACA,QACA,SACA,MACA,SAEF,CACE,QACA,SAEF,CACE,MACA,SAEF,CACE,OACA,OAEF,CACE,MACA,OACA,SAEF,CACE,MACA,MACA,QACA,UAEF,CACE,OACA,OACA,YACA,SAEF,CACE,KACA,QACA,UAEF,CACE,QACA,MACA,UAEF,CACE,MACA,SAEF,CACE,MACA,OACA,QACA,SACA,QAEF,CACE,OACA,KACA,OAEF,CACE,QACA,SACA,QAEF,CACE,OACA,OAEF,CACE,WACA,SACA,QAEF,CACE,MACA,OACA,SACA,QACA,SACA,QACA,OACA,OAEF,CACE,MACA,OACA,QACA,SACA,OACA,SAEF,CACE,MACA,SAEF,CACE,OACA,UAEF,CACE,MACA,QAEF,CACE,MACA,UAEF,CACE,UACA,QAEF,CACE,SACA,QAEF,CACE,QACA,MAEF,CACE,SACA,OAEF,CACE,OACA,MAEF,CACE,QACA,OAEF,CACE,WACA,OACA,SACA,SAEF,CACE,WACA,SACA,QAEF,CACE,OACA,MAEF,CACE,MACA,MAEF,CACE,MACA,SACA,KACA,OAEF,CACE,KACA,OACA,QACA,OAEF,CACE,MACA,UAEF,CACE,UACA,QAEF,CACE,MACA,OACA,UACA,aACA,OACA,QAEF,CACE,MACA,YACA,OACA,UAEF,CACE,QACA,OAEF,CACE,QACA,OACA,OAEF,CACE,QACA,OAEF,CACE,SACA,QAEF,CACE,OACA,OAEF,CACE,QACA,QAEF,CACE,OACA,OAEF,CACE,SACA,UACA,QAEF,CACE,OACA,QACA,OAEF,CACE,OACA,OAEF,CACE,QACA,QAEF,CACE,OACA,MACA,MAEF,CACE,UACA,SACA,QACA,OACA,OAEF,CACE,SACA,QACA,QACA,QAEF,CACE,UACA,OACA,SAEF,CACE,UACA,SACA,SACA,QACA,QAEF,CACE,OACA,OAEF,CACE,QACA,OAEF,CACE,OACA,QACA,OAEF,CACE,OACA,SACA,QACA,MACA,SAEF,CACE,QACA,OAEF,CACE,KACA,OAEF,CACE,UACA,SACA,QACA,OACA,OACA,OAEF,CACE,OACA,MAEF,CACE,QACA,OAEF,CACE,OACA,SACA,UACA,OACA,SAEF,CACE,KACA,SACA,SAEF,CACE,UACA,SACA,OAEF,CACE,OACA,SAEF,CACE,MACA,SACA,OACA,WACA,SACA,WAEF,CACE,QACA,OACA,aAEF,CACE,MACA,MAEF,CACE,OACA,OAEF,CACE,MACA,OACA,SAEF,CACE,OACA,UAEF,CACE,KACA,QAEF,CACE,MACA,SAEF,CACE,UACA,OACA,SAEF,CACE,OACA,MAEF,CACE,MACA,SAEF,CACE,KACA,QAEF,CACE,MACA,QAEF,CACE,OACA,SAEF,CACE,MACA,OACA,OACA,SAEF,CACE,OACA,SAEF,CACE,MACA,SAEF,CACE,SACA,QAEF,CACE,MACA,OACA,UACA,UAEF,CACE,QACA,QAEF,CACE,MACA,KACA,SAEF,CACE,SACA,OACA,WACA,UACA,OACA,OAEF,CACE,QACA,aAEF,CACE,MACA,QAEF,CACE,OACA,UACA,UAEF,CACE,OACA,OAEF,CACE,OACA,OAEF,CACE,UACA,SACA,QACA,OACA,OAEF,CACE,WACA,SAEF,CACE,OACA,SAEF,CACE,OACA,SAEF,CACE,QACA,QAEF,CACE,QACA,OAEF,CACE,SACA,QAEF,CACE,QACA,MACA,QAEF,CACE,QACA,MAEF,CACE,SACA,OAEF,CACE,OACA,OAEF,CACE,QACA,QAEF,CACE,KACA,UACA,OAEF,CACE,MACA,SACA,SACA,QAEF,CACE,QACA,UACA,OACA,SAEF,CACE,QACA,OAEF,CACE,SACA,QAEF,CACE,OACA,OAEF,CACE,MACA,OACA,SAEF,CACE,OACA,UAEF,CACE,MACA,QACA,MACA,QAEF,CACE,KACA,QAEF,CACE,QACA,OAEF,CACE,MACA,SAEF,CACE,OACA,UAEF,CACE,QACA,QACA,OAEF,CACE,SACA,SACA,QAEF,CACE,MACA,OACA,SACA,SAEF,CACE,OACA,QACA,UACA,UAEF,CACE,KACA,MACA,OACA,MACA,UAEF,CACE,OACA,WAEF,CACE,MACA,UACA,QACA,OAEF,CACE,OACA,QACA,UACA,YACA,SACA,QACA,WAEF,CACE,SACA,SACA,QAEF,CACE,SACA,OACA,KACA,OAEF,CACE,MACA,QACA,SACA,UAEF,CACE,MACA,OACA,WAEF,CACE,QACA,SACA,QAEF,CACE,QACA,SACA,OACA,MACA,QAEF,CACE,QACA,SACA,MACA,QAEF,CACE,UACA,OACA,SAEF,CACE,QACA,OACA,QACA,SACA,UACA,SAEF,CACE,QACA,WACA,UAEF,CACE,KACA,SAEF,CACE,SACA,QACA,OACA,OAEF,CACE,UACA,QAEF,CACE,OACA,MACA,SACA,WAEF,CACE,OACA,MAEF,CACE,QACA,OAEF,CACE,OACA,SACA,UACA,QACA,WACA,OAEF,CACE,WACA,QAEF,CACE,QACA,MAEF,CACE,MACA,OACA,QACA,MACA,QAEF,CACE,KACA,OAEF,CACE,QACA,QAkBAC,EA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","sources":["webpack://_N_E/./components/common/form/address-auto-complete/item.tsx","webpack://_N_E/./components/common/form/address-auto-complete.tsx","webpack://_N_E/./components/common/form/address.tsx","webpack://_N_E/./lib/shared/form-request-makeup/requests/account/first-login/address.ts","webpack://_N_E/./components/account/first-login/address/body.tsx","webpack://_N_E/./components/common/spacer.tsx","webpack://_N_E/./lib/shared/form-request-makeup/types.ts","webpack://_N_E/./components/account/page-badge.tsx","webpack://_N_E/./pages/account.tsx"],"sourcesContent":["import { useCssStateManager } from \"../../../../hooks/use_css_state_manager\";\nimport { LocationAddress } from \"../../../../lib/shared/types/location.types\";\nimport { EventPane } from \"../../../core/event_pane\";\nimport { HighlightHash } from \"../address-auto-complete\";\n\nexport type AddressAutoCompleteItemProps = {\n    location: LocationAddress;\n    highlightHash: HighlightHash;\n    selected?: boolean;\n    onClick?: () => void;\n};\n\ntype HighlightSegment = {\n    value: string;\n    highlight: boolean;        \n};\n\nconst splitIntoHighlightSegments = (value: string,highlightHash: HighlightHash) => {\n    const ret: HighlightSegment[] = value.split(/([^A-Za-zÀ-ÖØ-öø-ÿ0-9]+)/g).map((word) => ({\n        value: word,\n        highlight: !!highlightHash[word.toLowerCase()]\n    }));    \n    return ret;\n};\n\nexport default function AddressAutoCompleteItem({location,highlightHash,onClick = () => {},selected = false}:AddressAutoCompleteItemProps) {\n    const cssStateManager = useCssStateManager([\"addressautocompleteitem\"]);\n    cssStateManager.useProperty(selected,\"selected\");\n\n    const segments = splitIntoHighlightSegments(location.label,highlightHash);\n    \n    return (\n        <>\n            <div className={cssStateManager.getClassNames()}>\n                {segments.map(({value,highlight},index) => {                    \n                    const className = highlight?\"highlight\":\"\";\n                    return <span key={index} className={className}>{value}</span>;\n                })}\n                <div className=\"selected-bar\"></div>\n                <EventPane onClick={onClick} />\n            </div>\n            <style jsx>{`\n            .addressautocompleteitem {\n                font-size: 14rem;\n                color: var(--input-textcolor);\n                padding: 8rem 12rem;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                position: relative;\n            }\n            .selected-bar {\n                position: absolute;\n                left: 0rem;\n                top: 0rem;\n                height: 100%;\n                width: 3rem;\n                background-color: #6a66bd;\n                display: none;\n            }\n            .selected .selected-bar {\n                display: block;\n            }\n            .selected {\n                background-color: rgba(0,0,0,0.06);\n            }\n            .addressautocompleteitem.hover {\n                background-color: rgba(0,0,0,0.04);\n            }\n            .highlight {\n                font-weight: 600;\n            }\n            `}</style>\n        </>\n    );\n}","import { CSSProperties, useContext, useEffect, useRef } from \"react\";\nimport { useCssStateManager } from \"../../../hooks/use_css_state_manager\";\nimport AddressAutoCompleteItem from \"./address-auto-complete/item\";\nimport IconButton from \"../icon-button\";\nimport { LocationAddress } from \"../../../lib/shared/types/location.types\";\nimport { useSmartState } from \"../../../hooks/use_smart_state\";\nimport { apiLocation } from \"../../../lib/api/location\";\nimport { libCountryMakeup } from \"../../../lib/shared/lib/country-makeup\";\nimport { LayoutStateContext } from \"../../../contexts/layout_state\";\nimport { AutoCompleteComm } from \"./address\";\nimport { misc } from \"../../../lib/misc\";\n\nexport type AddressAutoCompleteProps = {\n    verticalShift?: number;\n    countryValue: string;\n    lookup: string;\n    onLocationSelected?: (loc: LocationAddress) => void;\n    comm: AutoCompleteComm;\n    onExplicitClosed?: () => void;\n};\n\nconst altGroups: string[][] = [\n    [\n      \"allee\",\n      \"alley\",\n      \"ally\",\n      \"aly\"\n    ],\n    [\n      \"anex\",\n      \"annex\",\n      \"annx\",\n      \"anx\"\n    ],\n    [\n      \"arc\",\n      \"arcade\"\n    ],\n    [\n      \"av\",\n      \"ave\",\n      \"aven\",\n      \"avenu\",\n      \"avenue\",\n      \"avn\",\n      \"avnue\"\n    ],\n    [\n      \"bayoo\",\n      \"bayou\"\n    ],\n    [\n      \"bch\",\n      \"beach\"\n    ],\n    [\n      \"bend\",\n      \"bnd\"\n    ],\n    [\n      \"blf\",\n      \"bluf\",\n      \"bluff\"\n    ],\n    [\n      \"bot\",\n      \"btm\",\n      \"bottm\",\n      \"bottom\"\n    ],\n    [\n      \"blvd\",\n      \"boul\",\n      \"boulevard\",\n      \"boulv\"\n    ],\n    [\n      \"br\",\n      \"brnch\",\n      \"branch\"\n    ],\n    [\n      \"brdge\",\n      \"brg\",\n      \"bridge\"\n    ],\n    [\n      \"brk\",\n      \"brook\"\n    ],\n    [\n      \"byp\",\n      \"bypa\",\n      \"bypas\",\n      \"bypass\",\n      \"byps\"\n    ],\n    [\n      \"camp\",\n      \"cp\",\n      \"cmp\"\n    ],\n    [\n      \"canyn\",\n      \"canyon\",\n      \"cnyn\"\n    ],\n    [\n      \"cape\",\n      \"cpe\"\n    ],\n    [\n      \"causeway\",\n      \"causwa\",\n      \"cswy\"\n    ],\n    [\n      \"cen\",\n      \"cent\",\n      \"center\",\n      \"centr\",\n      \"centre\",\n      \"cnter\",\n      \"cntr\",\n      \"ctr\"\n    ],\n    [\n      \"cir\",\n      \"circ\",\n      \"circl\",\n      \"circle\",\n      \"crcl\",\n      \"crcle\"\n    ],\n    [\n      \"clf\",\n      \"cliff\"\n    ],\n    [\n      \"clfs\",\n      \"cliffs\"\n    ],\n    [\n      \"clb\",\n      \"club\"\n    ],\n    [\n      \"cor\",\n      \"corner\"\n    ],\n    [\n      \"corners\",\n      \"cors\"\n    ],\n    [\n      \"course\",\n      \"crse\"\n    ],\n    [\n      \"court\",\n      \"ct\"\n    ],\n    [\n      \"courts\",\n      \"cts\"\n    ],\n    [\n      \"cove\",\n      \"cv\"\n    ],\n    [\n      \"creek\",\n      \"crk\"\n    ],\n    [\n      \"crescent\",\n      \"cres\",\n      \"crsent\",\n      \"crsnt\"\n    ],\n    [\n      \"crossing\",\n      \"crssng\",\n      \"xing\"\n    ],\n    [\n      \"dale\",\n      \"dl\"\n    ],\n    [\n      \"dam\",\n      \"dm\"\n    ],\n    [\n      \"div\",\n      \"divide\",\n      \"dv\",\n      \"dvd\"\n    ],\n    [\n      \"dr\",\n      \"driv\",\n      \"drive\",\n      \"drv\"\n    ],\n    [\n      \"est\",\n      \"estate\"\n    ],\n    [\n      \"estates\",\n      \"ests\"\n    ],\n    [\n      \"exp\",\n      \"expr\",\n      \"express\",\n      \"expressway\",\n      \"expw\",\n      \"expy\"\n    ],\n    [\n      \"ext\",\n      \"extension\",\n      \"extn\",\n      \"extnsn\"\n    ],\n    [\n      \"falls\",\n      \"fls\"\n    ],\n    [\n      \"ferry\",\n      \"frry\",\n      \"fry\"\n    ],\n    [\n      \"field\",\n      \"fld\"\n    ],\n    [\n      \"fields\",\n      \"flds\"\n    ],\n    [\n      \"flat\",\n      \"flt\"\n    ],\n    [\n      \"flats\",\n      \"flts\"\n    ],\n    [\n      \"ford\",\n      \"frd\"\n    ],\n    [\n      \"forest\",\n      \"forests\",\n      \"frst\"\n    ],\n    [\n      \"forg\",\n      \"forge\",\n      \"frg\"\n    ],\n    [\n      \"fork\",\n      \"frk\"\n    ],\n    [\n      \"forks\",\n      \"frks\"\n    ],\n    [\n      \"fort\",\n      \"frt\",\n      \"ft\"\n    ],\n    [\n      \"freeway\",\n      \"freewy\",\n      \"frway\",\n      \"frwy\",\n      \"fwy\"\n    ],\n    [\n      \"garden\",\n      \"gardn\",\n      \"grden\",\n      \"grdn\"\n    ],\n    [\n      \"gardens\",\n      \"gdns\",\n      \"grdns\"\n    ],\n    [\n      \"gateway\",\n      \"gatewy\",\n      \"gatway\",\n      \"gtway\",\n      \"gtwy\"\n    ],\n    [\n      \"glen\",\n      \"gln\"\n    ],\n    [\n      \"green\",\n      \"grn\"\n    ],\n    [\n      \"grov\",\n      \"grove\",\n      \"grv\"\n    ],\n    [\n      \"harb\",\n      \"harbor\",\n      \"harbr\",\n      \"hbr\",\n      \"hrbor\"\n    ],\n    [\n      \"haven\",\n      \"hvn\"\n    ],\n    [\n      \"ht\",\n      \"hts\"\n    ],\n    [\n      \"highway\",\n      \"highwy\",\n      \"hiway\",\n      \"hiwy\",\n      \"hway\",\n      \"hwy\"\n    ],\n    [\n      \"hill\",\n      \"hl\"\n    ],\n    [\n      \"hills\",\n      \"hls\"\n    ],\n    [\n      \"hllw\",\n      \"hollow\",\n      \"hollows\",\n      \"holw\",\n      \"holws\"\n    ],\n    [\n      \"is\",\n      \"island\",\n      \"islnd\"\n    ],\n    [\n      \"islands\",\n      \"islnds\",\n      \"iss\"\n    ],\n    [\n      \"isle\",\n      \"isles\"\n    ],\n    [\n      \"jct\",\n      \"jction\",\n      \"jctn\",\n      \"junction\",\n      \"junctn\",\n      \"juncton\"\n    ],\n    [\n      \"jctns\",\n      \"jcts\",\n      \"junctions\"\n    ],\n    [\n      \"key\",\n      \"ky\"\n    ],\n    [\n      \"keys\",\n      \"kys\"\n    ],\n    [\n      \"knl\",\n      \"knol\",\n      \"knoll\"\n    ],\n    [\n      \"knls\",\n      \"knolls\"\n    ],\n    [\n      \"lk\",\n      \"lake\"\n    ],\n    [\n      \"lks\",\n      \"lakes\"\n    ],\n    [\n      \"landing\",\n      \"lndg\",\n      \"lndng\"\n    ],\n    [\n      \"lane\",\n      \"ln\"\n    ],\n    [\n      \"lgt\",\n      \"light\"\n    ],\n    [\n      \"lf\",\n      \"loaf\"\n    ],\n    [\n      \"lck\",\n      \"lock\"\n    ],\n    [\n      \"lcks\",\n      \"locks\"\n    ],\n    [\n      \"ldg\",\n      \"ldge\",\n      \"lodg\",\n      \"lodge\"\n    ],\n    [\n      \"loop\",\n      \"loops\"\n    ],\n    [\n      \"mnr\",\n      \"manor\"\n    ],\n    [\n      \"manors\",\n      \"mnrs\"\n    ],\n    [\n      \"mdw\",\n      \"mdws\",\n      \"meadows\",\n      \"medows\"\n    ],\n    [\n      \"missn\",\n      \"mssn\"\n    ],\n    [\n      \"mnt\",\n      \"mt\",\n      \"mount\"\n    ],\n    [\n      \"mntain\",\n      \"mntn\",\n      \"mountain\",\n      \"mountin\",\n      \"mtin\",\n      \"mtn\"\n    ],\n    [\n      \"mntns\",\n      \"mountains\"\n    ],\n    [\n      \"nck\",\n      \"neck\"\n    ],\n    [\n      \"orch\",\n      \"orchard\",\n      \"orchrd\"\n    ],\n    [\n      \"oval\",\n      \"ovl\"\n    ],\n    [\n      \"park\",\n      \"prk\"\n    ],\n    [\n      \"parkway\",\n      \"parkwy\",\n      \"pkway\",\n      \"pkwy\",\n      \"pky\"\n    ],\n    [\n      \"parkways\",\n      \"pkwys\"\n    ],\n    [\n      \"path\",\n      \"paths\"\n    ],\n    [\n      \"pike\",\n      \"pikes\"\n    ],\n    [\n      \"pines\",\n      \"pnes\"\n    ],\n    [\n      \"plain\",\n      \"pln\"\n    ],\n    [\n      \"plains\",\n      \"plns\"\n    ],\n    [\n      \"plaza\",\n      \"plz\",\n      \"plza\"\n    ],\n    [\n      \"point\",\n      \"pt\"\n    ],\n    [\n      \"points\",\n      \"pts\"\n    ],\n    [\n      \"port\",\n      \"prt\"\n    ],\n    [\n      \"ports\",\n      \"prts\"\n    ],\n    [\n      \"pr\",\n      \"prairie\",\n      \"prr\"\n    ],\n    [\n      \"rad\",\n      \"radial\",\n      \"radiel\",\n      \"radl\"\n    ],\n    [\n      \"ranch\",\n      \"ranches\",\n      \"rnch\",\n      \"rnchs\"\n    ],\n    [\n      \"rapid\",\n      \"rpd\"\n    ],\n    [\n      \"rapids\",\n      \"rpds\"\n    ],\n    [\n      \"rest\",\n      \"rst\"\n    ],\n    [\n      \"rdg\",\n      \"rdge\",\n      \"ridge\"\n    ],\n    [\n      \"rdgs\",\n      \"ridges\"\n    ],\n    [\n      \"riv\",\n      \"river\",\n      \"rvr\",\n      \"rivr\"\n    ],\n    [\n      \"rd\",\n      \"road\"\n    ],\n    [\n      \"roads\",\n      \"rds\"\n    ],\n    [\n      \"shl\",\n      \"shoal\"\n    ],\n    [\n      \"shls\",\n      \"shoals\"\n    ],\n    [\n      \"shoar\",\n      \"shore\",\n      \"shr\"\n    ],\n    [\n      \"shoars\",\n      \"shores\",\n      \"shrs\"\n    ],\n    [\n      \"spg\",\n      \"spng\",\n      \"spring\",\n      \"sprng\"\n    ],\n    [\n      \"spgs\",\n      \"spngs\",\n      \"springs\",\n      \"sprngs\"\n    ],\n    [\n      \"sq\",\n      \"sqr\",\n      \"sqre\",\n      \"squ\",\n      \"square\"\n    ],\n    [\n      \"sqrs\",\n      \"squares\"\n    ],\n    [\n      \"sta\",\n      \"station\",\n      \"statn\",\n      \"stn\"\n    ],\n    [\n      \"stra\",\n      \"strav\",\n      \"straven\",\n      \"stravenue\",\n      \"stravn\",\n      \"strvn\",\n      \"strvnue\"\n    ],\n    [\n      \"stream\",\n      \"streme\",\n      \"strm\"\n    ],\n    [\n      \"street\",\n      \"strt\",\n      \"st\",\n      \"str\"\n    ],\n    [\n      \"smt\",\n      \"sumit\",\n      \"sumitt\",\n      \"summit\"\n    ],\n    [\n      \"ter\",\n      \"terr\",\n      \"terrace\"\n    ],\n    [\n      \"trace\",\n      \"traces\",\n      \"trce\"\n    ],\n    [\n      \"track\",\n      \"tracks\",\n      \"trak\",\n      \"trk\",\n      \"trks\"\n    ],\n    [\n      \"trail\",\n      \"trails\",\n      \"trl\",\n      \"trls\"\n    ],\n    [\n      \"trailer\",\n      \"trlr\",\n      \"trlrs\"\n    ],\n    [\n      \"tunel\",\n      \"tunl\",\n      \"tunls\",\n      \"tunnel\",\n      \"tunnels\",\n      \"tunnl\"\n    ],\n    [\n      \"trnpk\",\n      \"turnpike\",\n      \"turnpk\"\n    ],\n    [\n      \"un\",\n      \"union\"\n    ],\n    [\n      \"valley\",\n      \"vally\",\n      \"vlly\",\n      \"vly\"\n    ],\n    [\n      \"valleys\",\n      \"vlys\"\n    ],\n    [\n      \"vdct\",\n      \"via\",\n      \"viadct\",\n      \"viaduct\"\n    ],\n    [\n      \"view\",\n      \"vw\"\n    ],\n    [\n      \"views\",\n      \"vws\"\n    ],\n    [\n      \"vill\",\n      \"villag\",\n      \"village\",\n      \"villg\",\n      \"villiage\",\n      \"vlg\"\n    ],\n    [\n      \"villages\",\n      \"vlgs\"\n    ],\n    [\n      \"ville\",\n      \"vl\"\n    ],\n    [\n      \"vis\",\n      \"vist\",\n      \"vista\",\n      \"vst\",\n      \"vsta\"\n    ],\n    [\n      \"wy\",\n      \"way\"\n    ],\n    [\n      \"wells\",\n      \"wls\"\n    ]\n];\n\nlet altWordMap: {[word: string]: string[]};\n\nconst genAltWordMap = () => {\n    const ret: {[word: string]: string[]} = {};\n    altGroups.forEach((group) => {\n        group.forEach((word) => {\n            ret[word] = group;\n        });\n    });\n    return ret;\n};\n\nexport type HighlightHash = {[word: string]: true};\n\nconst lookupToHighlightHash = (lookup: string) => {\n    const ret: HighlightHash = {};\n\n    altWordMap = altWordMap || genAltWordMap();\n\n    lookup.split(/[^A-Za-zÀ-ÖØ-öø-ÿ0-9]+/g).map(x => x.toLocaleLowerCase()).forEach((word) => {\n        (altWordMap[word] || [word]).forEach((word) => {\n            ret[word] = true;\n        });\n        if (/^\\d+$/.test(word)) {\n            ret[`${word}t`] = true;\n            ret[`${word}th`] = true;\n            ret[`${word}t`] = true;\n            ret[`${word}st`] = true;\n            ret[`${word}s`] = true;\n            ret[`${word}nd`] = true;\n            ret[`${word}n`] = true;\n            ret[`${word}rd`] = true;\n            ret[`${word}r`] = true;\n        }\n        if (/^\\d+(?:th|t|st|s|nd|n|rd|r)$/.test(word)) {\n            const num = /^(\\d+)/.exec(word)[1];\n            ret[`${num}`] = true;\n            ret[`${num}th`] = true;\n            ret[`${num}t`] = true;\n            ret[`${num}st`] = true;\n            ret[`${num}s`] = true;\n            ret[`${num}nd`] = true;\n            ret[`${num}n`] = true;\n            ret[`${num}rd`] = true;\n            ret[`${num}r`] = true;\n        }\n    });\n\n    return ret;\n};\n\nexport default function AddressAutoComplete({verticalShift = 0,countryValue,lookup,onLocationSelected = () => {},comm,onExplicitClosed = () => {}}:AddressAutoCompleteProps) {\n    const { scalePixelToRem,scaleRemToPixel } = useContext(LayoutStateContext);\n    const cssStateManager = useCssStateManager([\"addressautocomplete\"]);\n    const locations = useSmartState<LocationAddress[]>([]);\n    comm.isActive = (locations.value.length>0);\n    const selectedIndex = useSmartState(-1);\n    const highlightHashRef = useRef<HighlightHash>({});\n\n    cssStateManager.useProperty(locations.value.length===0,\"is-empty\");\n    const styles: CSSProperties = {\n        top: `${verticalShift}rem`\n    };\n\n    const locationRequestCounterRef = useRef(0);\n\n    const disableKeyboardRef = useRef(false);\n\n    useEffect(() => {\n        const hasTouchEvents = misc.hasTouchEvents();\n        disableKeyboardRef.current = hasTouchEvents;\n    },[]);\n\n    useEffect(() => {\n        comm.onUp = () => {\n            if ((locations.value.length>0) && (!disableKeyboardRef.current)) {                    \n                const newIndex = selectedIndex.value-1+((selectedIndex.value===0)?locations.value.length:0);\n                selectedIndex.value = newIndex;\n                scrollIntoView(newIndex);\n            }\n        };\n        comm.onDown = () => {\n            if ((locations.value.length>0) && (!disableKeyboardRef.current)) {\n                const newIndex = (selectedIndex.value+1)%locations.value.length;\n                selectedIndex.value = newIndex;\n                scrollIntoView(newIndex);\n            }\n        };\n        comm.onEnter = () => {\n            if ((locations.value.length>0) && (!disableKeyboardRef.current)) {\n                handleLocationItemClick(locations.value[selectedIndex.value]);\n            }\n        };\n        comm.onEsc = () => {\n            if ((locations.value.length>0) && (!disableKeyboardRef.current)) {\n                clearLocations();\n            }\n        };\n        return () => {\n            comm.onDown = () => {};\n            comm.onUp = () => {};\n            comm.onEnter = () => {};\n            comm.onEsc = () => {};\n        };\n    },[]);\n\n    useEffect(() => {\n        if (lookup!==\"\") {\n            (async () => {\n                const country = libCountryMakeup.getCountry(countryValue);\n                if (country) {\n                    locationRequestCounterRef.current++;\n                    const savedCounter = locationRequestCounterRef.current;    \n                    const results = await apiLocation.search(lookup,country.code);\n                    if (savedCounter===locationRequestCounterRef.current) {\n                        highlightHashRef.current = lookupToHighlightHash(lookup);\n                        locations.value = results;\n                        selectedIndex.value = ((results.length>0) && (!disableKeyboardRef.current))?0:-1;\n                    }\n                }\n                else {\n                    locationRequestCounterRef.current++;\n                    highlightHashRef.current = {};\n                    locations.value = [];\n                    selectedIndex.value = -1;\n                }                \n            })();\n        }\n        else {\n            locationRequestCounterRef.current++;\n            highlightHashRef.current = {};\n            locations.value = [];\n            selectedIndex.value = -1;\n        }\n    },[lookup]);\n\n    const scrollerRef = useRef<HTMLDivElement>();\n\n    const itemHeight = 35;\n    const itemsPerView = 5;\n    const itemCount = locations.value.length;\n\n    const scrollIntoView = (index: number) => {\n        const itemCount = locations.value.length;\n        const height = Math.min(itemsPerView,itemCount);\n        const { current: scrollerElem } = scrollerRef;\n        if (scrollerElem) {\n            const itemUpper = index*itemHeight;\n            const itemLower = itemUpper+itemHeight;\n            const upperLimit = scalePixelToRem(scrollerElem.scrollTop);\n            const lowerLimit = upperLimit+height*itemHeight;\n            if (itemUpper<upperLimit) {\n                scrollerElem.scrollTop-= scaleRemToPixel(upperLimit-itemUpper);\n            }\n            else if (itemLower>lowerLimit) {\n                scrollerElem.scrollTop+= scaleRemToPixel(itemLower-lowerLimit);\n            }\n        }\n    };\n\n    const itemsStyles: CSSProperties = {\n        height: `${Math.min(itemsPerView,itemCount)*itemHeight}rem`\n    };\n\n    const handleSuggestionCloseClick = () => {\n        clearLocations();\n        onExplicitClosed();\n    };\n\n    const clearLocations = () => {\n        locationRequestCounterRef.current++;\n        highlightHashRef.current = {};\n        locations.value = [];\n        selectedIndex.value = -1;\n    };\n\n    const handleLocationItemClick = (loc: LocationAddress) => {\n        clearLocations();\n        onLocationSelected(loc);\n    };\n\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()} style={styles}>\n                <div className=\"dropdown\">\n                    <div className=\"header\">\n                        SUGGESTIONS\n                        <div className=\"icon-wrapper\">\n                            <div className=\"icon\">\n                                <IconButton \n                                    iconName=\"navbar-cross\" \n                                    fontSize={12} \n                                    padding={10} \n                                    extraPaddingHori={4} \n                                    color=\"#888\" \n                                    hoverColor=\"#444\" \n                                    onClick={handleSuggestionCloseClick}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                     <div className=\"items\" style={itemsStyles} ref={scrollerRef} >\n                        {locations.value.map((loc,index) => <AddressAutoCompleteItem \n                            key={index} \n                            location={loc} \n                            highlightHash={highlightHashRef.current} \n                            onClick={() => handleLocationItemClick(loc)}\n                            selected={selectedIndex.value===index}\n                        />)}\n                    </div>\n                </div>\n            </div>\n            <style jsx>{`\n            .addressautocomplete {\n                --duration: 0.2s;\n                position: relative;\n                width: 100%;\n                height: 0rem;\n                z-index: 1;\n                opacity: 1;\n                visibility: visible;\n                transition: opacity var(--duration),visibility var(--duration);\n            }\n\n            .items {\n                overflow-y: auto;\n            }\n\n            .is-empty {\n                opacity: 0;\n                visibility: hidden;\n            }\n\n            .icon-wrapper {\n                position: relative;\n            }\n\n            .icon {\n                position: absolute;\n                right: -10rem;\n                top: -10rem;\n            }\n\n            .header {\n                font-size: 12rem;\n                color: #999;\n                padding: 10rem 10rem;\n                display: flex;\n                justify-content: space-between;\n            }\n\n            .dropdown {\n                position: absolute;\n                left: 0rem;\n                right: 0rem;\n                top: 0rem;\n                background-color: var(--input-backcolor);\n                border: 1rem solid var(--input-bordercolor);\n                border-radius: 3rem;\n            }\n            `}</style>\n        </>\n    );\n}","import { useCssStateManager } from \"../../../hooks/use_css_state_manager\";\nimport Input from \"./input\";\nimport { useSmartState } from \"../../../hooks/use_smart_state\";\nimport { CountryMakeupField, libCountryMakeup } from \"../../../lib/shared/lib/country-makeup\";\nimport { useForm } from \"./form\";\nimport { FormValues } from \"../../../lib/shared/form-request-makeup/types\";\nimport { Fragment, useContext, useEffect, useRef } from \"react\";\nimport { SelectOption } from \"../../../lib/shared/types/form.types\";\nimport { LayoutStateContext } from \"../../../contexts/layout_state\";\nimport AddressAutoComplete from \"./address-auto-complete\";\nimport { LocationAddress } from \"../../../lib/shared/types/location.types\";\nimport { AccountUserAddress } from \"../../../hooks/use_account\";\n\nexport type AddressProps = {\n    namePrefix?: string;\n    firstName: string;\n    lastName: string;\n    phone?: string;\n    editAddress?: AccountUserAddress;\n    skipFirstFocus?: boolean;\n    askWhetherToSetAsDefault?: boolean;\n};\n\nexport type AutoCompleteComm = {\n    onUp: () => void;\n    onDown: () => void;\n    onEnter: () => void;\n    onEsc: () => void;\n    isActive: boolean;    \n};\n\nexport default function Address({\n        namePrefix = \"\",\n        firstName,\n        lastName,\n        phone,\n        editAddress,\n        skipFirstFocus = false,\n        askWhetherToSetAsDefault = false\n    }:AddressProps) {\n    const { mobileDetect: { widthCutoffStyleSection } } = useContext(LayoutStateContext);\n\n    const cssStateManager = useCssStateManager([\"address\"]);\n\n    const selectedCountry = useSmartState(\"\");\n\n    const { getFormValues,focusInput,setInputValue } = useForm();\n\n    const savedFormValuesRef = useRef<FormValues>();\n    const isFirstFocusRef = useRef(true);\n\n    const handleCountryChange = (value: string) => {\n        if (savedFormValuesRef.current) {\n            savedFormValuesRef.current = getFormValues();\n            delete savedFormValuesRef.current[\"province\"];\n            delete savedFormValuesRef.current[\"country\"];    \n        }\n        else {\n            if (editAddress) {\n                let {\n                    firstName,\n                    lastName,\n                    address1,\n                    address2,\n                    city,\n                    country,\n                    province,\n                    phone,\n                    zip\n                } = editAddress;\n                province = libCountryMakeup.matchProvince(country,province);\n                // console.log(\"province\",province);\n                savedFormValuesRef.current = {firstName,lastName,address1,address2,city,province,phone,zip};\n            }\n            else {\n                savedFormValuesRef.current = {firstName,lastName,phone};\n            }            \n        }\n\n        selectedCountry.value = value;\n    };        \n\n    useEffect(() => {\n        if (selectedCountry.value!==\"\") {\n            const { makeup } = libCountryMakeup.getCountry(selectedCountry.value);\n            const name = makeup[0][0].id;\n            if ((!isFirstFocusRef.current) || (!skipFirstFocus)) {\n                focusInput(name);\n            }             \n            const phone = getFormValues()?.phone || \"\";\n            if (phone.split(\"/\").slice(1).join(\"/\").trim()===\"\") {\n                setInputValue(\"phone\",`${libCountryMakeup.getCountryCode(selectedCountry.value)}/`);                \n            }\n            isFirstFocusRef.current = false;\n        }\n    },[selectedCountry.value]);\n\n    const addressLookup = useSmartState(\"\");\n\n    const handleAddressChange = (value: string) => {\n        addressLookup.value = value;\n    };\n\n    const handleAddressBlur = () => {\n        setTimeout(() => {\n            addressLookup.value = \"\";\n        },100);        \n    };\n\n    const handleAutoCompleteLocationSelected = (loc: LocationAddress) => {\n        if (loc.address1) setInputValue(\"address1\",loc.address1);\n        if (loc.address2) setInputValue(\"address2\",loc.address2);\n        if (loc.city) setInputValue(\"city\",loc.city);\n        if (loc.province) {\n            setInputValue(\"province\",libCountryMakeup.matchProvince(selectedCountry.value,loc.province));\n        }\n        if (loc.zip) setInputValue(\"zip\",loc.zip);\n        focusInput(\"phone\");\n    };\n\n    const autoCompleteCommRef = useRef<AutoCompleteComm>({\n        onDown: () => {},\n        onUp: () => {},\n        onEnter: () => {},\n        onEsc: () => {},\n        isActive: false\n    });\n\n    const handleAddressKeyDown = (key: string,preventDefault: () => void,preventEnter: () => void) => {\n        if (key===\"ArrowUp\") {\n            autoCompleteCommRef.current.onUp();\n            preventDefault();\n        }\n        else if (key===\"ArrowDown\") {\n            autoCompleteCommRef.current.onDown();\n            preventDefault();\n        }\n        else if (key===\"Enter\") {\n            if (autoCompleteCommRef.current.isActive) {\n                autoCompleteCommRef.current.onEnter();\n                preventDefault();\n                preventEnter();    \n            }\n        }\n        else if (key===\"Escape\") {\n            autoCompleteCommRef.current.onEsc();\n            preventDefault();\n        }\n    };\n\n    const handleAutoCompleteExplicitClosed = () => {\n        focusInput(\"address1\");\n    };\n\n    const renderCountryMakeup = (askWhetherToSetAsDefault: boolean) => {        \n        if (selectedCountry.value!==\"\") {\n            const { makeup,provinceOptions } = libCountryMakeup.getCountry(selectedCountry.value);\n\n            const { current: savedValues } = savedFormValuesRef;\n\n            const fieldMakeupToInput = ({id,caption,optional}: CountryMakeupField) => {\n                if ((id===\"province\") && (provinceOptions)) {\n                    const selectOptions: SelectOption[] = [{value: \"---\",caption,disabled: true},...provinceOptions.map(({id,caption}): SelectOption => ({value: id,caption}))];\n                    return <Input key={`${namePrefix}${id}`} name={`${namePrefix}${id}`} caption={caption} type=\"select\" selectOptions={selectOptions} initialValue={savedValues[id] || \"---\"} required={!optional} />;\n                }\n                else {           \n                    const addon = (id===\"address1\")?(\n                        <AddressAutoComplete \n                            verticalShift={-16} \n                            lookup={addressLookup.value} \n                            countryValue={selectedCountry.value}\n                            onLocationSelected={handleAutoCompleteLocationSelected}\n                            comm={autoCompleteCommRef.current}\n                            onExplicitClosed={handleAutoCompleteExplicitClosed}\n                        />\n                    ):\"\";\n                    return <Fragment key={`${namePrefix}${id}`}>\n                        <Input \n                            name={`${namePrefix}${id}`} \n                            caption={caption} \n                            type={(id===\"phone\"?\"mobile\":\"text\")} \n                            initialValue={savedValues[id] || \"\"} \n                            required={!optional} \n                            {...((id===\"address1\")?{\n                                onChange: handleAddressChange,\n                                onKeyDown: handleAddressKeyDown,\n                                onBlur: handleAddressBlur\n                            }:{})} \n                        />\n                        {addon}\n                    </Fragment>;\n                }                \n            };\n\n            return (\n                <>\n                    <div key={selectedCountry.value}>\n                        {makeup.map((fieldGroup,index) => {\n                            if (fieldGroup.length>1) {\n                                return (\n                                    <div key={`group${index}`} className=\"lateral-layout\">\n                                        {fieldGroup.map((fieldMakeup) => {\n                                            const { id } = fieldMakeup;\n\n                                            return (\n                                                <div key={`${namePrefix}${id}`} className=\"lateral-layout-child\">\n                                                    {fieldMakeupToInput(fieldMakeup)}\n                                                </div>                                    \n                                            );\n                                        })}\n                                    </div>\n                                );\n                            }\n                            else {\n                                return fieldMakeupToInput(fieldGroup[0]);\n                            }\n                        })}                        \n                    </div>\n                    {askWhetherToSetAsDefault?(\n                        <Input name=\"setAsDefault\" type=\"checkbox\" />\n                    ):\"\"}\n                    <style jsx>{`\n                    .lateral-layout {\n                        display: flex;\n                        column-gap: 12rem;\n                    }\n                    .lateral-layout-child {\n                        flex: 1 0;\n                    }\n                    ${widthCutoffStyleSection(`\n                        .lateral-layout {\n                            flex-direction: column;\n                        }\n                    `)}\n                    `}</style>\n                </>\n            );\n        }\n        else {\n            return \"\";\n        }\n    };\n\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()}>\n                <Input \n                    name={`${namePrefix}country`} \n                    type=\"select\" \n                    selectOptions={libCountryMakeup.getSelectOptions()}\n                    initialValue={editAddress?editAddress.country:\"United States\"}\n                    onChange={handleCountryChange}\n                    callOnChangeOnInit\n                />\n                {renderCountryMakeup(askWhetherToSetAsDefault)}\n                {/*}\n                <div className=\"lateral-layout\">\n                    <div className=\"lateral-layout-child\">\n                        <Input name={`${namePrefix}firstName`} />\n                    </div>\n                    <div className=\"lateral-layout-child\">\n                        <Input name={`${namePrefix}lastName`} />\n                    </div>\n                </div>                                \n                <Input name={`${namePrefix}address1`} />\n                <Input name={`${namePrefix}address2`} />\n                {*/}\n            </div>\n            <style jsx>{`\n            .address {\n            }\n            .lateral-layout {\n                display: flex;\n                column-gap: 12rem;\n            }\n            .lateral-layout-child {\n                flex: 1 0;\n            }\n            `}</style>\n        </>\n    );\n}","import { libCountryMakeup } from \"../../../../lib/country-makeup\";\nimport { FormRequestMakeup, commonEmptyValues } from \"../../../types\";\n\ntype NameValues = {\n    nickname?: string;\n    country: string;\n    firstName: string;\n    lastName: string;\n    address1: string;\n    address2: string;\n    city?: string;\n    province?: string;\n    zip?: string;\n    phone: string;\n    setAsDefault?: string;\n    editId?: string;\n};\n\nconst _formRequestAccountFirstLoginAddress: FormRequestMakeup<NameValues> = {\n    trimValues: true,\n    validation: ({country: countryValue,province,zip}) => {\n        const country = libCountryMakeup.getCountry(countryValue);\n        if (!country) {\n            return {\n                message: `The selected value for the 'Country/region' field is not a valid one`,\n                inputNames: [\"country\"]\n            };\n        }\n        if (country.provinceOptions) {\n            if (country.provinceOptions.filter(({id}) => id===province).length!==1) {\n                const countryMakeupHash = libCountryMakeup.getCountryMakeupHash(countryValue);                \n                return {\n                    message: `The selected value for the '${countryMakeupHash?.[\"province\"]?.caption}' field is not a valid one`,\n                    inputNames: [\"province\"]\n                };    \n            }\n        }\n        // if (countryMakeupHash[\"zip\"]) {\n        //     if (!libCountryMakeup.validatePostCode(countryValue,zip!)) {\n        //         return {\n        //             message: `The value for the '${countryMakeupHash[\"zip\"].caption}' field is not valid`,\n        //             inputNames: [\"zip\"]\n        //         };\n        //     }\n        // }\n    },\n    preValidationAlterations: ({country: countryValue},inputs) => {\n        const countryMakeupHash = libCountryMakeup.getCountryMakeupHash(countryValue);\n        if (countryMakeupHash) {\n            inputs[\"address2\"].caption = countryMakeupHash[\"address2\"].caption;\n            const fieldNames = [\"city\",\"province\",\"zip\"];\n            fieldNames.forEach((fieldName) => {\n                const fieldMakeup = countryMakeupHash[fieldName];\n                if (fieldMakeup) {\n                    const { caption,optional } = fieldMakeup\n                    inputs[fieldName].caption = caption;                    \n                    inputs[fieldName].required = !optional;\n                }\n            });\n        }\n    },\n    inputs: {\n        nickname: {\n            caption: \"Nickname\",\n            placeholder: \"e.g. Home\"\n        },\n        country: {\n            caption: \"Country/region\",\n            required: true\n        },\n        firstName: {\n            caption: \"First name\",\n            required: true\n        },\n        lastName: {\n            caption: \"Last name\",\n            required: true\n        },\n        address1: {\n            caption: \"Address\",\n            required: true\n        },\n        address2: {\n            caption: \"\",\n        },\n        city: {\n            caption: \"\",\n        },\n        province: {\n            caption: \"\",\n            emptyValue: \"---\"\n        },\n        zip: {\n            caption: \"\",\n            validation: \"postcode\"\n        },\n        phone: {\n            caption: \"Mobile phone number\",\n            emptyValue: commonEmptyValues.phone,\n            validation: \"phone\",\n            defaultInitialValue: \"1/\"\n        },\n        setAsDefault: {\n            caption: \"Make this the default address\",\n        },\n        editId: {\n            caption: \"\",\n        }\n    },\n    relativeUrl: \"/users/account?action=save-address\",\n    alternativeSubmits: {\n        skip: {\n            relativeUrl: \"/users/account?action=skip-save-address\",\n            emptyForm: true\n        }\n    }\n};\n\nexport const formRequestAccountFirstLoginAddress = _formRequestAccountFirstLoginAddress as FormRequestMakeup;","import { useContext, useEffect } from \"react\";\nimport { styledButton } from \"../../../common/button\";\nimport Address from \"../../../common/form/address\";\nimport Box from \"../../../common/form/box\";\nimport { AlternateButton, Button } from \"../../../common/form/button\";\nimport Form from \"../../../common/form/form\";\nimport Input from \"../../../common/form/input\";\nimport P from \"../../../common/form/p\";\nimport SepLine from \"../../../common/form/sep-line\";\nimport SubmitButton from \"../../../common/form/submit-button\";\nimport Title from \"../../../common/form/title\";\nimport Spacer from \"../../../common/spacer\";\nimport { Account, AccountUserAddress, consumeAccount } from \"../../../../hooks/use_account\";\nimport { useCustomRouter } from \"../../../../hooks/use_custom_router\";\nimport { formRequestAccountFirstLoginAddress } from \"../../../../lib/shared/form-request-makeup/requests/account/first-login/address\";\nimport { formParentAccount } from \"../../../../pages/account\";\nimport { formParentYourAddresses } from \"../../../../pages/account/your-addresses\";\nimport { LayoutStateContext } from \"../../../../contexts/layout_state\";\nimport { useStatusMessage } from \"../../../../hooks/use_status_message\";\nimport { cart } from \"../../../../lib/services/cart/cart\";\n\nexport type AccountFirstLoginAddressBodyProps = {\n    context?: \"setup\" | \"manage\";\n    subContext?: \"default\" | \"add\" | \"edit\";\n    editId?: string;\n    cancelPath?: string;\n    checkoutUrl?: string;\n};\n\nexport default function AccountFirstLoginAddressBody({\n        context = \"setup\",\n        subContext = \"default\",\n        editId,\n        cancelPath,\n        checkoutUrl\n    }:AccountFirstLoginAddressBodyProps) {\n    const account = consumeAccount();\n    const { user } = (account.value as Account);\n    const buttonWidth = 90;\n\n    const router = useCustomRouter();\n\n    let editAddress: AccountUserAddress;\n    let editAddressIsAlreadyDefault = false;\n\n    const { routerIsLocked } = useContext(LayoutStateContext);\n\n    const statusMessage = useStatusMessage(true);\n\n    if (editId) {\n        const address = user.addresses.filter(({id}) => id===editId)[0];\n        if (address) {\n            editAddress = address;\n            editAddressIsAlreadyDefault = (user.addresses[0].id===editId);\n        }\n\n        useEffect(() => {\n            if (!address) {\n                statusMessage.loadMessage({\n                    type: \"error\",\n                    message: \"Address not found\"\n                });\n                router.push(\"/account/your-addresses\");    \n            }\n        },[]);\n\n        if (!address) {\n            return null;\n        }\n    }    \n\n    const { title,text,parent,buttonCaption,successMessage,successMessageSetAsDefault,askWhetherToSetAsDefault } = (() => {\n        if (context===\"setup\") {\n            return {\n                title: \"Setup Default Address\",\n                text: \"You can setup your default address now for faster checkouts, or skip this step for later.\",\n                parent: undefined,\n                buttonCaption: \"Save\",\n                successMessage: \"Your default address has been setup.\",\n                successMessageSetAsDefault: \"Your default address has been setup.\",\n                askWhetherToSetAsDefault: false\n            };\n        }\n        else {\n            if (subContext===\"default\") {\n                return {\n                    title: \"Setup Default Address\",\n                    text: \"Setup your default address for faster checkouts.\",\n                    parent: formParentAccount,\n                    buttonCaption: \"Save\",\n                    successMessage: \"Your default address has been setup.\",\n                    successMessageSetAsDefault: \"Your default address has been setup.\",\n                    askWhetherToSetAsDefault: false\n                };\n            }\n            else if (subContext===\"add\") {\n                return {\n                    title: \"Add Address\",\n                    text: \"Fill the form below to add a new address to your account.\",\n                    parent: formParentYourAddresses,\n                    buttonCaption: \"Save\",\n                    successMessage: \"A new address has been added to your account.\",\n                    successMessageSetAsDefault: \"A new address has been added to your account and also set as default.\",\n                    askWhetherToSetAsDefault: true\n                };\n            }\n            else { // edit\n                return {\n                    title: \"Edit Address\",\n                    text: \"Use the form below to update your existing address.\",\n                    parent: checkoutUrl?{\n                        caption: \"Back to Checkout\",\n                        path: checkoutUrl\n                    }:formParentYourAddresses,\n                    buttonCaption: \"Save\",\n                    successMessage: \"Your address has been updated successfully.\",\n                    successMessageSetAsDefault: \"Your address has been updated successfully and also set as default.\",\n                    askWhetherToSetAsDefault: !editAddressIsAlreadyDefault\n                };\n            }\n        }\n    })();\n\n    return (\n        <Form \n            requestMakeup={formRequestAccountFirstLoginAddress}\n            autoFocus\n            input={{}}\n            parent={parent}\n            onSuccess={({setAsDefault}:{setAsDefault: boolean},name) => {\n                if (checkoutUrl) {\n                    cart.accountShopifyIntegrationStore(checkoutUrl,account.value);\n                }\n                return {\n                    type: \"redirect\",\n                    path: checkoutUrl?checkoutUrl:((context===\"setup\")?\"/account\":\"/account/your-addresses\"),\n                    ...((name!==\"skip\")?{\n                        message: {\n                            type: \"info\",\n                            message: setAsDefault?successMessageSetAsDefault:successMessage\n                        }\n                    }:{})                    \n                };\n            }}\n        >\n            <Title>{title}</Title>\n            <Box border>\n                <P>\n                    {text}\n                </P>\n                <Address \n                    firstName={user.firstName}\n                    lastName={user.lastName}\n                    phone={user.phone}\n                    editAddress={editAddress}\n                    askWhetherToSetAsDefault={askWhetherToSetAsDefault}\n                />\n                {editAddress?(\n                    <Input name=\"editId\" type=\"hidden\" initialValue={editAddress.id} />\n                ):\"\"}\n                <SubmitButton caption={buttonCaption} inline fixedWidth={buttonWidth} />\n                {(context===\"setup\")?(\n                    <>\n                        <Spacer type=\"horizontal\" size={10} />\n                        <SubmitButton caption=\"Skip\" name=\"skip\" inline alternate fixedWidth={buttonWidth} />\n                    </>\n                ):\"\"}\n                {cancelPath?(\n                    <>\n                        <Spacer type=\"horizontal\" size={10} />\n                        <AlternateButton caption=\"Cancel\" disabled={routerIsLocked.value} redirectToPath={checkoutUrl?checkoutUrl:cancelPath} />\n                    </>\n                ):\"\"}\n            </Box>\n        </Form>\n    );\n}","import { CSSProperties } from \"react\";\nimport { useCssStateManager } from \"../../hooks/use_css_state_manager\";\n\nexport type SpacerProps = {\n    type?: \"vertical\" | \"horizontal\";\n    size: number;\n};\n\nexport default function Spacer({type = \"vertical\",size}:SpacerProps) {\n    const cssStateManager = useCssStateManager([\"spacer\"]);\n    cssStateManager.useProperty(type===\"vertical\",\"type-is-vertical\");\n    cssStateManager.useProperty(type===\"horizontal\",\"type-is-horizontal\");\n    const styles: CSSProperties = {\n        ...((type===\"vertical\")?{height: `${size}rem`}:{width: `${size}rem`}),\n        display: (type===\"vertical\")?\"block\":\"inline-block\"\n    };\n    return <div style={styles}></div>;\n}","export type FormError<TValues extends FormValues = FormValues> = {\n    message: string;\n    inputNames: (keyof TValues)[];\n};\n\nexport type FormInputValidation<TValues extends FormValues = FormValues> = string | ((value: string) => string | FormError<TValues> | void);\n\nexport type FormValues = {[name: string]: string};\n\nexport type FormValidation<TValues extends FormValues = FormValues> = (values: TValues) => string | FormError<TValues> | void;\n\nexport type FormRequestMakeupInput<TValues extends FormValues = FormValues> = {\n    caption: string;\n    required?: boolean;\n    placeholder?: string;\n    defaultInitialValue?: string;\n    emptyValue?: string | RegExp;\n    validation?: FormInputValidation<TValues>;\n};\n\nexport type FormRequestMakeupInputs<TValues extends FormValues = FormValues> = {\n    [name: string]: FormRequestMakeupInput<TValues>;\n};\n\nexport type AlternativeSubmit = {\n    relativeUrl: string;\n    emptyForm?: boolean;\n};\n\nexport type FormRequestMakeup<TValues extends FormValues = FormValues> = {\n    trimValues?: true | string[];\n    validation?: FormValidation<TValues>;\n    preValidationAlterations?: (values: TValues,inputs: FormRequestMakeupInputs<TValues>) => void;\n    inputs: FormRequestMakeupInputs<TValues>;\n    relativeUrl: string;\n    errorTable?: {\n        [id: string]: string;\n    };\n    alternativeSubmits?: {\n        [name: string]: AlternativeSubmit;\n    };\n};\n\nexport const commonEmptyValues = {\n    phone: /^(?:\\d*\\/)?\\s*$/\n};","import { useCssStateManager } from \"../../hooks/use_css_state_manager\";\nimport { EventPane } from \"../core/event_pane\";\n\nexport type PageBadgeProps = {\n    title: string;\n    description: string;\n    iconName: string;\n    onClick?: () => void;\n};\n\nexport default function PageBadge({title,description,iconName,onClick = () => {}}:PageBadgeProps) {\n    const cssStateManager = useCssStateManager([\"page-badge\"]);\n    return (\n        <>\n            <div className={cssStateManager.getClassNames()}>\n                <div className=\"icon\"><i className={`icon-${iconName}`}/></div>\n                <div className=\"info\">\n                    <div className=\"title\">{title}</div>\n                    <div className=\"description\">{description}</div>\n                </div>                \n                <EventPane onClick={onClick} hoverOnTouchDown />\n            </div>\n            <style jsx>{`\n            .page-badge {\n                border: 1rem solid #aaa;\n                border-radius: 10rem;\n                padding: 20rem 20rem;\n                flex: 1 0;\n                display: flex;\n                flex-direction: row;\n                align-items: start;\n                position: relative;\n            }\n\n            .page-badge.hover {\n                background-color: rgba(0,0,0,0.05);\n                border: 1rem solid #999;\n            }\n\n            .icon {\n                font-size: 55rem;\n                color: #076bd1;\n                overflow-y: hidden;\n                height: 62rem;\n                flex: 0 0 68rem;\n            }\n\n            .icon i {\n                display: inline-block;\n                position: relative;\n                top: -7rem;\n            }\n\n            .info {\n            }\n            .title {\n                font-weight: 600;\n                color: #666;\n                margin-bottom: 5rem;\n            }\n            .description {\n                color: #888;\n                font-size: 13rem;\n            }\n            `}</style>\n        </>\n    );\n}","import { useEffect } from \"react\";\nimport { Account, AccountUser, consumeAccount } from \"../hooks/use_account\";\nimport { useCssStateManager } from \"../hooks/use_css_state_manager\";\nimport { useCustomRouter } from \"../hooks/use_custom_router\";\nimport { InlineButton, styledButton } from \"../components/common/button\";\nimport { SmartState, useSmartState } from \"../hooks/use_smart_state\";\nimport { securePage } from \"../components/common/secure_page\";\nimport Desktop from \"../components/common/desktop\";\nimport PageBadge from \"../components/account/page-badge\";\nimport Mobile from \"../components/common/mobile\";\nimport { useStatusMessage } from \"../hooks/use_status_message\";\nimport { FormParent } from \"../components/common/form/form\";\n\nexport type AccountPageProps = {\n    result: {\n        user: AccountUser;\n    };\n    account: SmartState<Account | null>;\n};\n\ntype BadgeData = {\n    iconName: string;\n    title: string;\n    description: string;\n    path?: string;\n};\n\nconst badges: BadgeData[] = [{\n    iconName: \"account-track-order\",\n    title: \"Your Orders\",\n    description: \"Track, return, cancel an order, download invoice or re-order\",\n    path: \"/account/orders\"\n},{\n    iconName: \"account-manage-account\",\n    title: \"Manage Account\",\n    description: \"Edit name, mobile, email and password\",\n    path: \"/account/manage-account\"\n},{\n    iconName: \"account-addresses\",\n    title: \"Your Addresses\",\n    description: \"Edit, remove or set default address\",\n    path: \"/account/your-addresses?from-account=true\"\n},{\n    iconName: \"account-transactions\",\n    title: \"Your Transactions\",\n    description: \"View all your past payments and refunds\",\n    path: \"/account/your-transactions\"\n},{\n    iconName: \"account-reviews\",\n    title: \"Your Reviews\",\n    description: \"See recent items you can review, and view past reviews\",\n    path: \"/account/your-reviews\"\n},{\n    iconName: \"account-support\",\n    title: \"Support\",\n    description: \"Browse self service options, help articles or contact us\",\n    path: \"/pages/help\"\n}];\n\nexport const formParentAccount: FormParent = {\n    caption: \"Account\",\n    path: \"/account\"\n};\n\nconst AccountPage = securePage(function({result: { user },account}: AccountPageProps) {\n    const router = useCustomRouter();\n\n    const handleSignoutClick = () => {\n        account.value = null;\n        router.push(\"/login\");\n    };\n\n    const handleBadgeClick = (path?: string) => {\n        if (path) {\n            router.push(path);\n        }\n    };\n\n    const statusMessage = useStatusMessage()\n\n    return (<>\n        <div className=\"account-page\">\n            {statusMessage.component}\n            <div className=\"title\">Your Account</div>\n            <Desktop>\n                <div className=\"desktop\">\n                    <div className=\"desktop-row\">\n                        <PageBadge {...badges[0]} onClick={() => handleBadgeClick(badges[0].path)} />\n                        <div className=\"verti-spacer\"></div>\n                        <PageBadge {...badges[1]} onClick={() => handleBadgeClick(badges[1].path)} />\n                        <div className=\"verti-spacer\"></div>\n                        <PageBadge {...badges[2]} onClick={() => handleBadgeClick(badges[2].path)} />\n                    </div>\n                    <div className=\"desktop-row\">\n                        <PageBadge {...badges[3]} onClick={() => handleBadgeClick(badges[3].path)} />\n                        <div className=\"verti-spacer\"></div>\n                        <PageBadge {...badges[4]} onClick={() => handleBadgeClick(badges[4].path)} />\n                        <div className=\"verti-spacer\"></div>\n                        <PageBadge {...badges[5]} onClick={() => handleBadgeClick(badges[5].path)} />\n                    </div>\n                </div>\n            </Desktop>\n            <Mobile>\n                <div className=\"mobile\">\n                    <PageBadge {...badges[0]} onClick={() => handleBadgeClick(badges[0].path)} />\n                    <div className=\"hori-spacer\"></div>\n                    <PageBadge {...badges[1]} onClick={() => handleBadgeClick(badges[1].path)} />\n                    <div className=\"hori-spacer\"></div>\n                    <PageBadge {...badges[2]} onClick={() => handleBadgeClick(badges[2].path)} />\n                    <div className=\"hori-spacer\"></div>\n                    <PageBadge {...badges[3]} onClick={() => handleBadgeClick(badges[3].path)} />\n                    <div className=\"hori-spacer\"></div>\n                    <PageBadge {...badges[4]} onClick={() => handleBadgeClick(badges[4].path)} />\n                    <div className=\"hori-spacer\"></div>\n                    <PageBadge {...badges[5]} onClick={() => handleBadgeClick(badges[5].path)} />\n                </div>\n            </Mobile>\n            <div className=\"section-separator\"></div>\n            <div className=\"title\">Active Orders</div>\n            <div className=\"sep-line\"></div>\n            <div className=\"no-orders\">\n                <i className=\"icon-no-orders\" />\n                <div className=\"info\">\n                    Any orders in processing which you can still edit or cancel will appear here.\n                </div>\n            </div>\n        </div>\n        <style jsx>{`\n            .account-page {\n                /* min-height: 600rem; */\n            }\n            .title {\n                font-size: 22rem;\n                font-weight: 600;\n                margin-bottom: 25rem;\n                text-align: center;\n            }\n            .section-separator {\n                height: 55rem;\n            }\n            .desktop {\n                min-width: 1000rem;\n                max-width: 1000rem;\n            }\n            .verti-spacer {\n                flex: 0 0 20rem;\n            }\n            .hori-spacer {\n                height: 20rem;\n            }\n            .desktop-row {\n                display: flex;\n                margin-bottom: 20rem;                \n            }\n            .sep-line {\n                height: 1rem;\n                background-color: #ddd;\n            }\n            .no-orders {\n                text-align: center;\n            }\n\n            .no-orders i {\n                display: inline-block;\n                font-size: 90rem;\n                color: #ddd;\n            }\n\n            .no-orders .info {\n                color: #888;\n            }\n        `}</style>\n    </>\n);\n}/* ,\"/users/profile?action=get-profile\" */);\n\nexport default AccountPage;\n"],"names":["AddressAutoCompleteItem","location","highlightHash","onClick","selected","cssStateManager","useCssStateManager","useProperty","segments","value","split","map","word","highlight","toLowerCase","splitIntoHighlightSegments","label","div","getClassNames","index","className","span","EventPane","altWordMap","altGroups","lookupToHighlightHash","lookup","ret","forEach","group","genAltWordMap","x","toLocaleLowerCase","test","num","exec","AddressAutoComplete","verticalShift","countryValue","onLocationSelected","comm","onExplicitClosed","useContext","LayoutStateContext","scalePixelToRem","scaleRemToPixel","locations","useSmartState","isActive","length","selectedIndex","highlightHashRef","useRef","styles","top","locationRequestCounterRef","disableKeyboardRef","useEffect","hasTouchEvents","misc","current","onUp","newIndex","scrollIntoView","onDown","onEnter","handleLocationItemClick","onEsc","clearLocations","country","savedCounter","results","libCountryMakeup","apiLocation","code","scrollerRef","itemCount","height","Math","min","scrollerElem","itemUpper","itemLower","upperLimit","scrollTop","lowerLimit","itemsStyles","loc","style","IconButton","iconName","fontSize","padding","extraPaddingHori","color","hoverColor","ref","Address","namePrefix","firstName","lastName","phone","editAddress","skipFirstFocus","askWhetherToSetAsDefault","mobileDetect","widthCutoffStyleSection","selectedCountry","useForm","getFormValues","focusInput","setInputValue","savedFormValuesRef","isFirstFocusRef","name","makeup","id","slice","join","trim","addressLookup","handleAddressChange","handleAddressBlur","setTimeout","handleAutoCompleteLocationSelected","address1","address2","city","province","zip","autoCompleteCommRef","handleAddressKeyDown","key","preventDefault","preventEnter","handleAutoCompleteExplicitClosed","Input","type","selectOptions","initialValue","onChange","callOnChangeOnInit","provinceOptions","fieldMakeupToInput","caption","optional","disabled","savedValues","required","addon","Fragment","onKeyDown","onBlur","fieldGroup","fieldMakeup","renderCountryMakeup","formRequestAccountFirstLoginAddress","trimValues","validation","message","inputNames","filter","countryMakeupHash","preValidationAlterations","inputs","fieldName","nickname","placeholder","emptyValue","commonEmptyValues","defaultInitialValue","setAsDefault","editId","relativeUrl","alternativeSubmits","skip","emptyForm","AccountFirstLoginAddressBody","context","subContext","cancelPath","checkoutUrl","account","consumeAccount","user","router","useCustomRouter","editAddressIsAlreadyDefault","routerIsLocked","statusMessage","useStatusMessage","address","addresses","loadMessage","push","title","text","parent","undefined","buttonCaption","successMessage","successMessageSetAsDefault","formParentAccount","formParentYourAddresses","path","Form","requestMakeup","autoFocus","input","onSuccess","cart","Title","Box","border","P","SubmitButton","inline","fixedWidth","Spacer","size","alternate","AlternateButton","redirectToPath","width","display","PageBadge","description","i","hoverOnTouchDown","badges","securePage","result","handleBadgeClick","component","Desktop","Mobile"],"sourceRoot":""}